!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADVANCED_READ_INFO	mpt.c	223;"	d	file:
ALLOCMEM_FAILED	tool.h	48;"	d
ARCH	Makefile	/^ARCH := $(shell uname -m)$/;"	m
ARRAY_SIZE	tool.h	41;"	d
ATOMIC_WRITE	shannon-mbr.h	62;"	d
BE_ARCH	Makefile	/^	BE_ARCH := 0$/;"	m
BE_ARCH	Makefile	/^	BE_ARCH := 1$/;"	m
BITMAP_BBT_MAGIC	tool.h	84;"	d
BITS_PER_LONG	list.h	9;"	d
BIT_MASK	list.h	12;"	d
BIT_WORD	list.h	14;"	d
BLACK	graphics.h	/^	BLACK = 30,$/;"	e	enum:color
BLUE	graphics.h	/^	BLUE,$/;"	e	enum:color
BUG	list.h	57;"	d
BUG_ON	list.h	58;"	d
BYTES_PER_LONG	list.h	13;"	d
BYTE_TOTLE	graphics.h	/^	BYTE_TOTLE$/;"	e	enum:high_low_byte
CE_NLUN_MASK	both.h	58;"	d
CE_NLUN_SHIFT	both.h	59;"	d
CFLAGS	Makefile	/^CFLAGS		:= -Wall -std=gnu99 -DDMA_ADDR_LENGTH=$(DMA_ADDR_LENGTH) -DBE_ARCH=$(BE_ARCH)$/;"	m
COLOR_TOTAL	graphics.h	/^	COLOR_TOTAL$/;"	e	enum:color
CURRENT_MBR_VERSION	shannon-mbr.h	16;"	d
DARK_GREEN	graphics.h	/^	DARK_GREEN,$/;"	e	enum:color
DEFAULT_DEVNAME	tool.h	54;"	d
DEV_TOTAL	dev-type.h	/^	DEV_TOTAL$/;"	e	enum:device_type
DIRECT_IO_POLL	both.h	21;"	d
DIRECT_IO_START	both.h	20;"	d
DIRECT_IO_STOP	both.h	22;"	d
DMA_ADDR_LENGTH	Makefile	/^	DMA_ADDR_LENGTH := 4$/;"	m
DMA_ADDR_LENGTH	Makefile	/^	DMA_ADDR_LENGTH := 8$/;"	m
DW_SIZE	tool.h	50;"	d
ECCMODE_BYPASS_SCRAMBLER_ONLY	tool.h	74;"	d
ECCMODE_DISABLE	tool.h	73;"	d
ECCMODE_ENABLE	tool.h	72;"	d
ERR	tool.h	44;"	d
EXT_CFLAGS	Makefile	/^	EXT_CFLAGS := -D__AARCH64__$/;"	m
EXT_CFLAGS	Makefile	/^	EXT_CFLAGS := -m64$/;"	m
FAILED_FLASH_STATUS	tool.h	46;"	d
FIJI_MAP	dev-type.h	/^	FIJI_MAP,$/;"	e	enum:device_type
FLASH_IFMODE_ASYNC	tool.h	68;"	d
FLASH_IFMODE_SYNC	tool.h	69;"	d
FLASH_IFMODE_TOGGLE	tool.h	70;"	d
FLASH_SUCCESS_MASK	tool.h	81;"	d
FLASH_SUCCESS_STATUS	tool.h	82;"	d
GET_MBR_LINE	mpt.c	707;"	d	file:
GET_MEMBER	parse.c	498;"	d	file:
GREEN	graphics.h	/^	GREEN,$/;"	e	enum:color
HBYTE	graphics.h	/^	HBYTE = 1,$/;"	e	enum:high_low_byte
HEAD0	tool.h	59;"	d
HEAD1	tool.h	60;"	d
HEADER	Makefile	/^HEADER		= tool.h list.h both.h shannon-mbr.h graphics.h dev-type.h$/;"	m
HEAD_MASK	tool.h	58;"	d
HW_REG_SIZE	mpt.c	1618;"	d	file:
HW_cfg_chunk	both.h	/^	HW_cfg_chunk,$/;"	e	enum:HW_cfgreg
HW_cfg_ecc	both.h	/^	HW_cfg_ecc,$/;"	e	enum:HW_cfgreg
HW_cfg_flash	both.h	/^	HW_cfg_flash,$/;"	e	enum:HW_cfgreg
HW_cfg_mask	both.h	/^	HW_cfg_mask,$/;"	e	enum:HW_cfgreg
HW_cfg_misc	both.h	/^	HW_cfg_misc,$/;"	e	enum:HW_cfgreg
HW_cfg_raid	both.h	/^	HW_cfg_raid,$/;"	e	enum:HW_cfgreg
HW_cfg_secto	both.h	/^	HW_cfg_secto,$/;"	e	enum:HW_cfgreg
HW_cfg_seed	both.h	/^	HW_cfg_seed,$/;"	e	enum:HW_cfgreg
HW_cfgreg	both.h	/^enum HW_cfgreg {$/;"	g
HW_cmdq_head	both.h	/^	HW_cmdq_head,		\/\/ command queue head$/;"	e	enum:HW_lunreg
HW_cmdq_pte_hi	both.h	/^	HW_cmdq_pte_hi,		\/\/ command queue pte hi32$/;"	e	enum:HW_lunreg
HW_cmdq_pte_lo	both.h	/^	HW_cmdq_pte_lo,$/;"	e	enum:HW_lunreg
HW_cmdq_tail	both.h	/^	HW_cmdq_tail,		\/\/ command queue tail, readonly$/;"	e	enum:HW_lunreg
HW_cmpq_head	both.h	/^	HW_cmpq_head,		\/\/ completion queue head, readonly$/;"	e	enum:HW_lunreg
HW_cmpq_pte_hi	both.h	/^	HW_cmpq_pte_hi,$/;"	e	enum:HW_lunreg
HW_cmpq_pte_lo	both.h	/^	HW_cmpq_pte_lo,		\/\/ completion queue pte lo32$/;"	e	enum:HW_lunreg
HW_control_staus	both.h	/^	HW_control_staus,	\/\/ lun control and status$/;"	e	enum:HW_lunreg
HW_lunreg	both.h	/^enum HW_lunreg {$/;"	g
HW_sys_ecc_info	both.h	/^	HW_sys_ecc_info,$/;"	e	enum:HW_sysreg
HW_sys_general_info	both.h	/^	HW_sys_general_info,$/;"	e	enum:HW_sysreg
HW_sys_raid_info	both.h	/^	HW_sys_raid_info,$/;"	e	enum:HW_sysreg
HW_sys_wrbuf_info	both.h	/^	HW_sys_wrbuf_info,$/;"	e	enum:HW_sysreg
HW_sysreg	both.h	/^enum HW_sysreg {$/;"	g
IFMODE_ASYNC	tool.h	64;"	d
IFMODE_MASK	tool.h	63;"	d
IFMODE_SYNC	tool.h	65;"	d
IFMODE_TOGGLE	tool.h	66;"	d
INDEP_HEAD	tool.h	61;"	d
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f	signature:(struct list_head *list)
INNER_COL_SPAN	graphics.h	32;"	d
INNER_ROW_SPAN	graphics.h	33;"	d
K7F_MAP	dev-type.h	/^	K7F_MAP = 0,$/;"	e	enum:device_type
K7h_DUAL_MAP	dev-type.h	/^	K7h_DUAL_MAP,$/;"	e	enum:device_type
LBYTE	graphics.h	/^	LBYTE = 0,$/;"	e	enum:high_low_byte
LEFT_RIGHT_SPAN	graphics.h	31;"	d
LENGTH	graphics.h	21;"	d
LIST_HEAD	list.h	73;"	d
LIST_HEAD_INIT	list.h	71;"	d
LIST_POISON1	list.h	49;"	d
LIST_POISON2	list.h	50;"	d
LUN_MAP_SX	graphics.h	34;"	d
LUN_MAP_SY	graphics.h	35;"	d
MAX_BADBLK_COUNT	tool.h	85;"	d
MAX_BAD_BLOCK_IN_A_LUN	mpt.c	24;"	d	file:
MAX_LUN	tool.h	126;"	d
MAX_LUN_NBYTE	tool.h	128;"	d
MAX_LUN_NLONG	tool.h	127;"	d
MBR_EBLOCKS	shannon-mbr.h	13;"	d
MBR_ID	mpt.c	17;"	d	file:
MBR_LOGICB_SHIFT	shannon-mbr.h	15;"	d
MBR_WATERMARK	shannon-mbr.h	14;"	d
METADATA_SIZE	tool.h	56;"	d
MPT_BBT_PAGEOFF	mpt.c	22;"	d	file:
MPT_DBBT_PAGEOFF	mpt.c	23;"	d	file:
MPT_HELP	mpt.c	26;"	d	file:
MPT_MBR_NBLK	mpt.c	19;"	d	file:
MPT_MBR_PAGEOFF	mpt.c	21;"	d	file:
MPT_MBR_SIZE	mpt.c	20;"	d	file:
NDATALUN	lost/super.c	184;"	d	file:
NDATALUN	lost/super2.c	229;"	d	file:
NONE	parse.c	518;"	d	file:
NORFLASH_INFO_ADDR	tool.h	227;"	d
NORFLASH_INFO_MAGIC	tool.h	228;"	d
NOR_ERASE_ADDR	nor.c	16;"	d	file:
NOR_ERASE_CTRL	nor.c	17;"	d	file:
NOR_READ_ADDR	nor.c	22;"	d	file:
NOR_READ_CTRL	nor.c	24;"	d	file:
NOR_READ_LENGTH	nor.c	23;"	d	file:
NOR_TIMEOUT	nor.c	26;"	d	file:
NOR_WRITE_ADDR	nor.c	19;"	d	file:
NOR_WRITE_CTRL	nor.c	20;"	d	file:
NO_CMDQUEUE_ROOM	tool.h	45;"	d
OK	tool.h	43;"	d
OVERFLOW_ADDR	tool.h	47;"	d
PAGE_SIZE	tool.h	53;"	d
PARSE_MEMBER	parse.c	14;"	d	file:
PHONY	Makefile	/^PHONY := ckarch$/;"	m
PKG_ATTR	graphics.h	23;"	d
PKG_LUNS	graphics.h	24;"	d
PLUN	lost/super.c	183;"	d	file:
PLUN	lost/super2.c	228;"	d	file:
PRIORITIZE_WRITE	shannon-mbr.h	61;"	d
PR_REQLIST	lost/reqlist.c	130;"	d	file:
PURPLE	graphics.h	/^	PURPLE,$/;"	e	enum:color
QW_SIZE	tool.h	51;"	d
RAIDMODE_DISABLE	tool.h	76;"	d
RAIDMODE_ENABLE	tool.h	77;"	d
RED	graphics.h	/^	RED,$/;"	e	enum:color
RELEASE	Makefile	/^RELEASE 	= shtool$/;"	m
RELEASE_SRC	Makefile	/^RELEASE_SRC	= main.c init.c parse.c utils.c api.c super.c req.c bbt.c mpt.c help.c microcode.c graphics.c dev-type.c$/;"	m
RUNCMDQ_US_TIMEOUT	tool.h	79;"	d
SET_MEMBER	parse.c	501;"	d	file:
SHANNONC_IOC_DI	both.h	16;"	d
SHANNONC_IOC_DK	both.h	15;"	d
SHANNONC_IOC_FM	both.h	11;"	d
SHANNONC_IOC_GB	both.h	17;"	d
SHANNONC_IOC_GD	both.h	18;"	d
SHANNONC_IOC_GF	both.h	14;"	d
SHANNONC_IOC_GM	both.h	10;"	d
SHANNONC_IOC_MAGIC	both.h	7;"	d
SHANNONC_IOC_MAXNR	both.h	8;"	d
SHANNONC_IOC_RM	both.h	12;"	d
SHANNONC_IOC_WM	both.h	13;"	d
SHANNON_MBR_H_	shannon-mbr.h	11;"	d
SH_ERASE_PLANE_SHIFT	both.h	300;"	d
SH_EXTERNAL_TEMP_DIV	mpt.c	145;"	d	file:
SH_HALTREAD_MASK	mpt.c	139;"	d	file:
SH_HALTREAD_SHIFT	mpt.c	138;"	d	file:
SH_RAIDWRITE_DUMMY_SHIFT	both.h	368;"	d
SH_RAIDWRITE_PLANE_SHIFT	both.h	367;"	d
SH_READ_PLANE_SHIFT	both.h	326;"	d
SH_READ_PLANE_SHIFT	both.h	336;"	d
SH_TEMP_AUX1_OFFSET	mpt.c	142;"	d	file:
SH_TEMP_AUX2_OFFSET	mpt.c	143;"	d	file:
SH_TEMP_BOARD_OFFSET	mpt.c	144;"	d	file:
SH_WRITE_DUMMY_SHIFT	both.h	311;"	d
SH_WRITE_PLANE_SHIFT	both.h	310;"	d
SRC	Makefile	/^SRC		= main.c init.c parse.c utils.c api.c super.c req.c bbt.c ecc.c ifmode.c mpt.c bufwrite.c dio.c nor.c help.c microcode.c graphics.c dev-type.c$/;"	m
SUBCARD_CNT	graphics.h	27;"	d
SUBCARD_COL	graphics.h	26;"	d
SUBCARD_PKGS	graphics.h	28;"	d
SUBCARD_ROW	graphics.h	25;"	d
SUBTOOL	main.c	21;"	d	file:
SUBTOOL_HEAD	main.c	18;"	d	file:
SUBTOOL_NOARG	main.c	30;"	d	file:
SUBTOOL_TAIL	main.c	39;"	d	file:
SUBUTILS	utils.c	505;"	d	file:
SUBUTILS_CKLUN	utils.c	506;"	d	file:
SUBUTILS_HEAD	utils.c	504;"	d	file:
SUBUTILS_TAIL	utils.c	507;"	d	file:
TARGET	Makefile	/^TARGET		= ztool$/;"	m
TEMPERATURE_LIMIT	tool.h	345;"	d
TOTAL_PKG_CNT	graphics.h	29;"	d
TYPE_CONFIG	both.h	230;"	d
TYPE_FLASH	both.h	229;"	d
U64_HIGH_32	tool.h	14;"	d
U64_HIGH_32	tool.h	18;"	d
U64_LOW_32	tool.h	13;"	d
U64_LOW_32	tool.h	17;"	d
UP_DOWN_SPAN	graphics.h	30;"	d
WHITE	graphics.h	/^	WHITE,$/;"	e	enum:color
WIDTH	graphics.h	22;"	d
YELLOW	graphics.h	/^	YELLOW,$/;"	e	enum:color
_8639_MAP	dev-type.h	/^	_8639_MAP,$/;"	e	enum:device_type
_LINUX_LIST_H	list.h	2;"	d
__BOTH_H__	both.h	2;"	d
__DEV_TYPE_H	dev-type.h	2;"	d
__GRAPHICS_H	graphics.h	2;"	d
__SHANNON_TOOL_H__	tool.h	2;"	d
__check_req_status	api.c	/^static int __check_req_status(struct shannon_request *req, int pr)$/;"	f	file:	signature:(struct shannon_request *req, int pr)
__drvsetting	both.h	/^	struct __drvsetting {$/;"	s	struct:usr_flash	access:public
__ecc_dummy_write	ecc.c	/^static int __ecc_dummy_write(struct shannon_dev *dev, int head, int blk, int page, int seed)$/;"	f	file:	signature:(struct shannon_dev *dev, int head, int blk, int page, int seed)
__ecc_noecc_write	ecc.c	/^static int __ecc_noecc_write(struct shannon_dev *dev, int head, int blk, int page, int seed)$/;"	f	file:	signature:(struct shannon_dev *dev, int head, int blk, int page, int seed)
__factory_ivb	both.h	/^	struct __factory_ivb {$/;"	s	struct:usr_flash	access:public
__list_add	list.h	/^extern void __list_add(struct list_head *new,$/;"	p	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_cut_position	list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head, struct list_head *entry)
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f	signature:(struct list_head * prev, struct list_head * next)
__list_del_entry	list.h	/^extern void __list_del_entry(struct list_head *entry);$/;"	p	signature:(struct list_head *entry)
__list_del_entry	list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
__list_for_each	list.h	432;"	d
__list_splice	list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f	signature:(const struct list_head *list, struct list_head *prev, struct list_head *next)
__modify_error_bit	ecc.c	/^static void __modify_error_bit(__u8 *data, int num)$/;"	f	file:	signature:(__u8 *data, int num)
__poll_bufcmdqueue	req.c	/^int __poll_bufcmdqueue(struct shannon_dev *dev, int head, int wait)$/;"	f	signature:(struct shannon_dev *dev, int head, int wait)
__poll_bufcmdqueue	tool.h	/^extern int __poll_bufcmdqueue(struct shannon_dev *dev, int head, int wait);$/;"	p	signature:(struct shannon_dev *dev, int head, int wait)
__poll_cmdqueue	req.c	/^int __poll_cmdqueue(struct shannon_dev *dev, int lun, int wait)$/;"	f	signature:(struct shannon_dev *dev, int lun, int wait)
__poll_cmdqueue	tool.h	/^extern int __poll_cmdqueue(struct shannon_dev *dev, int lun, int wait);$/;"	p	signature:(struct shannon_dev *dev, int lun, int wait)
__readmbr	mpt.c	/^static int __readmbr(struct shannon_dev *dev, struct list_head *req_head, struct list_head *arreq_head)$/;"	f	file:	signature:(struct shannon_dev *dev, struct list_head *req_head, struct list_head *arreq_head)
__softbitread	api.c	/^static int __softbitread(struct shannon_dev *dev, int lun, int block, int page, int nplane, int constant, char *filename)$/;"	f	file:	signature:(struct shannon_dev *dev, int lun, int block, int page, int nplane, int constant, char *filename)
__u16	tool.h	/^typedef unsigned short __u16;$/;"	t
__u32	tool.h	/^typedef unsigned int __u32;$/;"	t
__u64	tool.h	/^typedef unsigned long __u64;$/;"	t
__u8	tool.h	/^typedef unsigned char __u8;$/;"	t
__u8_le2be	nor.c	/^void __u8_le2be(void *buf, int count)$/;"	f	signature:(void *buf, int count)
absent_lun_bitmap	tool.h	/^	unsigned long absent_lun_bitmap[32];$/;"	m	struct:shannon_dev	access:public
absent_luns	tool.h	/^	int absent_luns;$/;"	m	struct:shannon_dev	access:public
active_block	tool.h	/^	int active_block[8];$/;"	m	struct:shannon_dev	access:public
addr	api.c	/^	__u8 addr;$/;"	m	struct:wr_flash_regs	file:	access:public
addr	both.h	/^	__u8 addr;$/;"	m	struct:sh_readid	access:public
addr	both.h	/^        __u8 addr;$/;"	m	struct:sh_writereg	access:public
advance_read	tool.h	/^	int advance_read;$/;"	m	struct:shannon_dev	access:public
advance_read	tool.h	/^	int advance_read;$/;"	m	struct:shannon_request	access:public
alloc_device	init.c	/^struct shannon_dev *alloc_device(char *devname)$/;"	f	signature:(char *devname)
alloc_device	tool.h	/^extern struct shannon_dev *alloc_device(char *devname);$/;"	p	signature:(char *devname)
alloc_live_context	mpt.c	/^static struct live_context *alloc_live_context(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
alloc_request	req.c	/^struct shannon_request *alloc_request(struct shannon_dev *dev, enum shannon_cmd opcode,$/;"	f	signature:(struct shannon_dev *dev, enum shannon_cmd opcode, int lun, int ppa, int head, int bsector, int nsector)
alloc_request	tool.h	/^extern struct shannon_request *alloc_request(struct shannon_dev *dev, enum shannon_cmd opcode,$/;"	p	signature:(struct shannon_dev *dev, enum shannon_cmd opcode, int lun, int ppa, int head, int bsector, int nsector)
alloc_request_no_dma	req.c	/^struct shannon_request *alloc_request_no_dma(struct shannon_dev *dev, enum shannon_cmd opcode,$/;"	f	signature:(struct shannon_dev *dev, enum shannon_cmd opcode, int lun, int ppa, int head, int bsector, int nsector, int no_dma)
alloc_request_no_dma	tool.h	/^extern struct shannon_request *alloc_request_no_dma(struct shannon_dev *dev, enum shannon_cmd opcode,$/;"	p	signature:(struct shannon_dev *dev, enum shannon_cmd opcode, int lun, int ppa, int head, int bsector, int nsector, int no_dma)
async_cycles	both.h	/^	int async_cycles;$/;"	m	struct:usr_config	access:public
atexit_free_kmem	main.c	/^static void atexit_free_kmem(void)$/;"	f	file:	signature:(void)
atomic_write	tool.h	/^	int atomic_write;$/;"	m	struct:shannon_dev	access:public
back_pad_cmdqueue	req.c	/^static void back_pad_cmdqueue(struct shannon_dev *dev, struct shannon_request *req) {}$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *req)
bad_blocks	tool.h	/^	int bad_blocks;$/;"	m	struct:shannon_dev	access:public
bad_phy_lun_map	shannon-mbr.h	/^	u64 bad_phy_lun_map[8];$/;"	m	struct:shannon_mbr	access:public
badblk_bmp	tool.h	/^	__u32 **badblk_bmp;		\/* bad blk bitmap per-lun *\/$/;"	m	struct:shannon_dev	access:public
bar	both.h	/^		int bar;$/;"	m	union:shannon_ioctl::__anon2	access:public
bar_dwlen	tool.h	/^	int bar_dwlen[2];$/;"	m	struct:shannon_dev	access:public
bb_count	tool.h	/^	unsigned int *bb_count;$/;"	m	struct:shannon_dev	access:public
bfree	tool.h	/^	int bfree;		\/* decide whether free data\/metadata mem or not *\/$/;"	m	struct:shannon_request	access:public
blk_hole_begin	tool.h	/^		int blk_hole_begin;$/;"	m	struct:shannon_dev::target_lun	access:public
blk_hole_count	tool.h	/^		int blk_hole_count;$/;"	m	struct:shannon_dev::target_lun	access:public
block	nor.c	/^	} block[0];$/;"	m	struct:norflash	typeref:struct:norflash::norblock	file:	access:public
block	tool.h	/^	int block;$/;"	m	struct:shannon_request	access:public
block_type	nor.c	/^	int block_type;$/;"	m	struct:norflash	file:	access:public
bm_bbt	tool.h	/^	int bm_bbt;$/;"	m	struct:shannon_dev	access:public
board_temp_threshold	tool.h	/^	int board_temp_threshold;$/;"	m	struct:shannon_dev	access:public
bsector	both.h	/^	__u8 bsector;		\/* begin sector *\/$/;"	m	struct:sh_cacheread	access:public
bsector	both.h	/^	__u8 bsector;$/;"	m	struct:sh_bufwrite	access:public
bsector	tool.h	/^	int bsector;$/;"	m	struct:shannon_request	access:public
bufcmd	tool.h	/^	int bufcmd;		\/* !=0 means buffer write\/read request *\/$/;"	m	struct:shannon_request	access:public
bufhead	tool.h	/^	struct shannon_bufhead *bufhead;\/* per-bufhead manage structure *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_bufhead	access:public
bufhead_list	tool.h	/^		struct list_head bufhead_list;$/;"	m	union:shannon_request::__anon4	typeref:struct:shannon_request::__anon4::list_head	access:public
byte_diff_number	ifmode.c	/^static int byte_diff_number(__u8 x, __u8 y)$/;"	f	file:	signature:(__u8 x, __u8 y)
byteid	both.h	/^	__u8 byteid[8];$/;"	m	union:flash_id	access:public
calculate_indirect_config	parse.c	/^int calculate_indirect_config(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
calculate_indirect_config	tool.h	/^extern int calculate_indirect_config(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
capacity	shannon-mbr.h	/^	u64 capacity;$/;"	m	struct:shannon_mbr	access:public
cfg_nchannel	shannon-mbr.h	/^	u32 cfg_nchannel;	\/\/ cfg_channels$/;"	m	struct:shannon_mbr	access:public
cfg_nlun	shannon-mbr.h	/^	u32 cfg_nlun;		\/\/ cfg_lun_in_lunset$/;"	m	struct:shannon_mbr	access:public
cfg_nthread	shannon-mbr.h	/^	u32 cfg_nthread;	\/\/ lunset_in_channel$/;"	m	struct:shannon_mbr	access:public
cfgreg_dwoff	tool.h	/^	int cfgreg_dwoff;$/;"	m	struct:shannon_dev	access:public
channel	tool.h	/^	int channel;$/;"	m	struct:shannon_lun	access:public
check_all_bbt	mpt.c	/^static void check_all_bbt(struct shannon_dev *dev, struct shannon_bbt *bbt, char *note)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt, char *note)
check_apptool	lost/format.sh	/^check_apptool()$/;"	f
check_bad_luns	tool.h	/^	int check_bad_luns;$/;"	m	struct:shannon_dev	access:public
check_bbt	bbt.c	/^int check_bbt(struct shannon_dev *dev, struct shannon_bbt *bbt)$/;"	f	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
check_bbt	tool.h	/^extern int check_bbt(struct shannon_dev *dev, struct shannon_bbt *bbt);$/;"	p	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
check_ecc_power	mpt.c	/^static void check_ecc_power(struct shannon_dev *dev, int power)$/;"	f	file:	signature:(struct shannon_dev *dev, int power)
check_ifmode_match	tool.h	/^static inline int check_ifmode_match(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
check_luninfo	bbt.c	/^int check_luninfo(struct shannon_dev *dev, struct shannon_luninfo *luninfo)$/;"	f	signature:(struct shannon_dev *dev, struct shannon_luninfo *luninfo)
check_luninfo	tool.h	/^extern int check_luninfo(struct shannon_dev *dev, struct shannon_luninfo *luninfo);$/;"	p	signature:(struct shannon_dev *dev, struct shannon_luninfo *luninfo)
check_mbr_bbt	mpt.c	/^static void check_mbr_bbt(struct shannon_dev *dev, struct shannon_bbt *mbr_bbt, char *note)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *mbr_bbt, char *note)
check_module	lost/format.sh	/^check_module()$/;"	f
check_nlun	utils.c	/^static int check_nlun(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
check_permission	lost/format.sh	/^check_permission()$/;"	f
check_req_status	api.c	/^int check_req_status(struct shannon_request *req)$/;"	f	signature:(struct shannon_request *req)
check_req_status	tool.h	/^extern int check_req_status(struct shannon_request *req);$/;"	p	signature:(struct shannon_request *req)
check_req_status_silent	api.c	/^int check_req_status_silent(struct shannon_request *req)$/;"	f	signature:(struct shannon_request *req)
check_req_status_silent	tool.h	/^extern int check_req_status_silent(struct shannon_request *req);$/;"	p	signature:(struct shannon_request *req)
check_status	tool.h	/^static inline int check_status(struct shannon_dev *dev, enum shannon_cmd cmd, __u64 status)	\/\/ return 1: success; 0. failed.$/;"	f	signature:(struct shannon_dev *dev, enum shannon_cmd cmd, __u64 status)
check_target_lun	init.c	/^static void check_target_lun(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
chunk_block	tool.h	/^	int chunk_block;$/;"	m	struct:shannon_request	access:public
chunk_list	tool.h	/^	struct list_head chunk_list;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
chunk_ndata	both.h	/^	int chunk_ndata;	\/\/ chunk data and metadata nbyte$/;"	m	struct:usr_config	access:public
chunk_nmeta	both.h	/^	int chunk_nmeta;$/;"	m	struct:usr_config	access:public
chunk_nsector	both.h	/^	int chunk_nsector;$/;"	m	struct:usr_config	access:public
chunk_plane	tool.h	/^	int chunk_plane;$/;"	m	struct:shannon_request	access:public
clear_bit	list.h	/^static inline void clear_bit(int nr, volatile unsigned long *addr)$/;"	f	signature:(int nr, volatile unsigned long *addr)
clear_line	graphics.h	10;"	d
clear_queue	init.c	/^static void clear_queue(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
clear_queue	tool.h	/^	void (*clear_queue)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
clear_screen	graphics.h	15;"	d
clk	shannon-mbr.h	/^	u16 clk;$/;"	m	struct:shannon_mbr	access:public
cmd	api.c	/^	__u8 cmd;$/;"	m	struct:wr_flash_regs	file:	access:public
cmd	both.h	/^	__u8 cmd;$/;"	m	struct:sh_readid	access:public
cmd	both.h	/^        __u8 cmd;$/;"	m	struct:sh_writereg	access:public
cmd_string	api.c	/^static char *cmd_string(enum shannon_cmd cmd)$/;"	f	file:	signature:(enum shannon_cmd cmd)
cmdempty	tool.h	/^	int cmdempty;$/;"	m	struct:shannon_bufhead	access:public
cmdempty	tool.h	/^	int cmdempty;$/;"	m	struct:shannon_thread	access:public
cmdhead	tool.h	/^	int cmdhead;		\/* byte unit *\/$/;"	m	struct:shannon_thread	access:public
cmdhead	tool.h	/^	int cmdhead;$/;"	m	struct:shannon_bufhead	access:public
cmdhead	tool.h	/^	int cmdhead;$/;"	m	struct:shannon_request	access:public
cmdlen	both.h	/^	int cmdlen;$/;"	m	struct:direct_io	access:public
cmdlen	tool.h	/^	int cmdlen;$/;"	m	struct:shannon_request	access:public
cmdmem	tool.h	/^	struct thread_mem cmdmem;$/;"	m	struct:shannon_bufhead	typeref:struct:shannon_bufhead::thread_mem	access:public
cmdmem	tool.h	/^	struct thread_mem cmdmem;$/;"	m	struct:shannon_thread	typeref:struct:shannon_thread::thread_mem	access:public
cmdq	tool.h	/^	__u64 **cmdq;$/;"	m	struct:live_context	access:public
cmpmem	tool.h	/^	struct thread_mem cmpmem;$/;"	m	struct:shannon_bufhead	typeref:struct:shannon_bufhead::thread_mem	access:public
cmpmem	tool.h	/^	struct thread_mem cmpmem;$/;"	m	struct:shannon_thread	typeref:struct:shannon_thread::thread_mem	access:public
cmpq	tool.h	/^	__u64 **cmpq;$/;"	m	struct:live_context	access:public
codeword_size	both.h	/^	int codeword_size;$/;"	m	struct:usr_config	access:public
color	graphics.h	/^enum color {$/;"	g
compare_noecc_rdwr_requests	ifmode.c	/^static void compare_noecc_rdwr_requests(struct shannon_dev *dev, struct shannon_request *wrhead, struct shannon_request *rdhead, long **lun_ecc_statistics)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *wrhead, struct shannon_request *rdhead, long **lun_ecc_statistics)
compare_noecc_rdwr_requests_hlpage	ifmode.c	/^static void compare_noecc_rdwr_requests_hlpage(struct shannon_dev *dev, struct shannon_request *wrhead, struct shannon_request *rdhead, long **lun_ecc_statistics, int HLBYTE)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *wrhead, struct shannon_request *rdhead, long **lun_ecc_statistics, int HLBYTE)
config	tool.h	/^	struct usr_config *config;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_config	access:public
config_bakup	tool.h	/^	struct usr_config *config_bakup;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_config	access:public
config_dev_type	dev-type.c	/^void config_dev_type(struct subcard_size *sc_size, int dev_type)$/;"	f	signature:(struct subcard_size *sc_size, int dev_type)
config_dev_type	dev-type.h	/^void config_dev_type(struct subcard_size *sc_size, int dev_type);$/;"	p	signature:(struct subcard_size *sc_size, int dev_type)
config_hardware	init.c	/^static void config_hardware(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
config_hardware	tool.h	/^	void (*config_hardware)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
configfile_member	parse.c	/^static int configfile_member(struct shannon_dev *dev, char *name, char *pv)$/;"	f	file:	signature:(struct shannon_dev *dev, char *name, char *pv)
construct_sb_luninfo	lost/super2.c	/^static int construct_sb_luninfo(struct shannon_dev *dev, char *luninfo_file)$/;"	f	file:	signature:(struct shannon_dev *dev, char *luninfo_file)
construct_sb_luninfo	super.c	/^int construct_sb_luninfo(struct shannon_dev *dev, char *luninfo_file)$/;"	f	signature:(struct shannon_dev *dev, char *luninfo_file)
construct_sb_luninfo	tool.h	/^extern int construct_sb_luninfo(struct shannon_dev *dev, char *luninfo_file);$/;"	p	signature:(struct shannon_dev *dev, char *luninfo_file)
container_of	list.h	53;"	d
count	nor.c	/^		int count;$/;"	m	struct:norflash::norblock	file:	access:public
cpu_to_le16	tool.h	821;"	d
cpu_to_le16	tool.h	837;"	d
cpu_to_le16s	tool.h	825;"	d
cpu_to_le16s	tool.h	841;"	d
cpu_to_le32	tool.h	822;"	d
cpu_to_le32	tool.h	838;"	d
cpu_to_le32s	tool.h	826;"	d
cpu_to_le32s	tool.h	842;"	d
cpu_to_le64	tool.h	823;"	d
cpu_to_le64	tool.h	839;"	d
cpu_to_le64s	tool.h	827;"	d
cpu_to_le64s	tool.h	843;"	d
ctrl_temp_threshold	tool.h	/^	int ctrl_temp_threshold;$/;"	m	struct:shannon_dev	access:public
dam_read_limit	both.h	/^	__u8 dam_read_limit;$/;"	m	struct:hw_config	access:public
data	api.c	/^	__u8 data[16];$/;"	m	struct:wr_flash_regs	file:	access:public
data	both.h	/^		__u8 data[16];$/;"	m	struct:usr_flash::__drvsetting	access:public
data	both.h	/^        __u8 data[0];$/;"	m	struct:sh_writereg	access:public
data	tool.h	/^	__u8 *data;$/;"	m	struct:shannon_request	access:public
datanum	both.h	/^		__u8 datanum;$/;"	m	struct:usr_flash::__drvsetting	access:public
dbuf_size	nor.c	/^	int dbuf_size;$/;"	m	struct:norflash	file:	access:public
deliver_userdata	init.c	/^static void deliver_userdata(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
deliver_userdata	tool.h	/^	void (*deliver_userdata)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
destory_reqlist	lost/reqlist.c	/^void destory_reqlist(struct list_head *req_head)$/;"	f	signature:(struct list_head *req_head)
destory_reqlist	tool.h	/^extern void destory_reqlist(struct list_head *req_head);$/;"	p	signature:(struct list_head *req_head)
details_flash	parse.c	/^static int details_flash(struct shannon_dev *dev, struct usr_flash *flash)$/;"	f	file:	signature:(struct shannon_dev *dev, struct usr_flash *flash)
dev	tool.h	/^	struct shannon_dev *dev;$/;"	m	struct:live_context	typeref:struct:live_context::shannon_dev	access:public
dev	tool.h	/^	struct shannon_dev *dev;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::shannon_dev	access:public
dev_pkg_phylun_fiji	dev-type.c	/^const unsigned char dev_pkg_phylun_fiji[][8+PKG_ATTR] = {$/;"	v
dev_pkg_phylun_k7f	dev-type.c	/^const unsigned char dev_pkg_phylun_k7f[][8+PKG_ATTR] = {$/;"	v
dev_pkg_phylun_k7h_dual	dev-type.c	/^const unsigned char dev_pkg_phylun_k7h_dual[][8+PKG_ATTR] = {$/;"	v
dev_type	tool.h	/^	int dev_type;$/;"	m	struct:shannon_dev	access:public
device_id	both.h	/^		__u8 device_id;$/;"	m	struct:flash_id::__anon1	access:public
device_id	both.h	/^	int device_id;$/;"	m	struct:usr_flash	access:public
device_type	dev-type.h	/^enum device_type {$/;"	g
dio	bufwrite.c	/^int dio(struct shannon_dev *dev, int opcode, int head, int begin, int count)$/;"	f	signature:(struct shannon_dev *dev, int opcode, int head, int begin, int count)
direct_cmdqueue	tool.h	/^		__u8 direct_cmdqueue[64];	\/* directly construct cmdqueue, for example used for write regs *\/$/;"	m	union:shannon_request::__anon3	access:public
direct_io	both.h	/^struct direct_io {$/;"	s
direct_io::cmdlen	both.h	/^	int cmdlen;$/;"	m	struct:direct_io	access:public
direct_io::done_phylun_bitmap	both.h	/^	unsigned long done_phylun_bitmap[8];$/;"	m	struct:direct_io	access:public
direct_io::done_ppa	both.h	/^	unsigned long done_ppa;$/;"	m	struct:direct_io	access:public
direct_io::head	both.h	/^	int head;$/;"	m	struct:direct_io	access:public
direct_io::limitppa	both.h	/^	int limitppa;$/;"	m	struct:direct_io	access:public
direct_io::nblk	both.h	/^	int nblk;$/;"	m	struct:direct_io	access:public
direct_io::ncacheread	both.h	/^	int ncacheread;$/;"	m	struct:direct_io	access:public
direct_io::npage	both.h	/^	int npage;$/;"	m	struct:direct_io	access:public
direct_io::nplane	both.h	/^	int nplane;$/;"	m	struct:direct_io	access:public
direct_io::nsector	both.h	/^	int nsector;$/;"	m	struct:direct_io	access:public
direct_io::opcode	both.h	/^	int opcode;$/;"	m	struct:direct_io	access:public
direct_io::phylun_bitmap	both.h	/^	unsigned long phylun_bitmap[8];$/;"	m	struct:direct_io	access:public
direct_io::sector_size	both.h	/^	int sector_size;$/;"	m	struct:direct_io	access:public
direct_io::tv	both.h	/^	struct timeval tv;	\/* deliver timeval to user space *\/$/;"	m	struct:direct_io	typeref:struct:direct_io::timeval	access:public
direct_io::type	both.h	/^	int type;		\/* DIRECT_IO_START, DIRECT_IO_POLL or DIRECT_IO_STOP *\/$/;"	m	struct:direct_io	access:public
disable_ecc	tool.h	/^	int disable_ecc;$/;"	m	struct:shannon_dev	access:public
dma_addr	both.h	/^	dma_addr_t dma_addr;$/;"	m	struct:shannon_ioctl	access:public
dma_addr	both.h	/^	dma_addr_t dma_addr;$/;"	m	struct:thread_mem	access:public
dma_addr	tool.h	/^	dma_addr_t dma_addr;$/;"	m	struct:memory	access:public
dma_addr_t	tool.h	/^typedef unsigned int dma_addr_t;$/;"	t
dma_addr_t	tool.h	/^typedef unsigned long long dma_addr_t;$/;"	t
dma_max_read_limit	shannon-mbr.h	/^	u8 dma_max_read_limit;$/;"	m	struct:shannon_mbr	access:public
dma_max_read_limit	tool.h	/^	int dma_max_read_limit;$/;"	m	struct:shannon_dev	access:public
do_direct_io	init.c	/^static void do_direct_io(struct shannon_dev *dev, struct direct_io *dio)$/;"	f	file:	signature:(struct shannon_dev *dev, struct direct_io *dio)
do_direct_io	tool.h	/^	void (*do_direct_io)(struct shannon_dev *dev, struct direct_io *dio);$/;"	m	struct:shannon_dev	access:public
do_parse_file	utils.c	/^static void do_parse_file(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_buf	utils.c	/^static void do_peek_buf(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_bufcmdq	utils.c	/^static void do_peek_bufcmdq(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_bufcmpq	utils.c	/^static void do_peek_bufcmpq(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_bufregs	utils.c	/^static void do_peek_bufregs(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_cfgregs	utils.c	/^static void do_peek_cfgregs(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_luncmdq	utils.c	/^static void do_peek_luncmdq(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_luncmpq	utils.c	/^static void do_peek_luncmpq(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_lunregs	utils.c	/^static void do_peek_lunregs(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_phylunmem	utils.c	/^static void do_peek_phylunmem(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_phylunregs	utils.c	/^static void do_peek_phylunregs(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_regs	utils.c	/^static void do_peek_regs(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_sections	utils.c	/^static void do_peek_sections(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_peek_sysregs	utils.c	/^static void do_peek_sysregs(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_phylun_mem	utils.c	/^static void do_phylun_mem(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_poke_buf	utils.c	/^static void do_poke_buf(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_poke_regs	utils.c	/^static void do_poke_regs(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
do_signal_int	main.c	/^void do_signal_int(int sig)$/;"	f	signature:(int sig)
domains	tool.h	/^	char domains[32];$/;"	m	struct:shannon_dev	access:public
done_phylun_bitmap	both.h	/^	unsigned long done_phylun_bitmap[8];$/;"	m	struct:direct_io	access:public
done_ppa	both.h	/^	unsigned long done_ppa;$/;"	m	struct:direct_io	access:public
draw_horizontal_line	graphics.c	/^void draw_horizontal_line(int sx, int sy, int length, int color)$/;"	f	signature:(int sx, int sy, int length, int color)
draw_horizontal_line	graphics.h	/^void draw_horizontal_line(int sx, int sy, int length, int color);$/;"	p	signature:(int sx, int sy, int length, int color)
draw_lun_map	graphics.c	/^void draw_lun_map(int sx, int sy, int row, int col, const char *pkg_partRef_map[], char *subcard_color_pkg)$/;"	f	signature:(int sx, int sy, int row, int col, const char *pkg_partRef_map[], char *subcard_color_pkg)
draw_lun_map	graphics.h	/^void draw_lun_map(int sx, int sy, int row, int col, const char *pkg_partRef_map[], char *subcard_color_pkg);$/;"	p	signature:(int sx, int sy, int row, int col, const char *pkg_partRef_map[], char *subcard_color_pkg)
draw_package	graphics.c	/^void draw_package(int sx, int sy, int length, int width, const char *partRef, int color)$/;"	f	signature:(int sx, int sy, int length, int width, const char *partRef, int color)
draw_package	graphics.h	/^void draw_package(int sx, int sy, int length, int width, const char *partRef, int color);$/;"	p	signature:(int sx, int sy, int length, int width, const char *partRef, int color)
draw_rectangle	graphics.c	/^void draw_rectangle(int sx, int sy, int length, int width, int color)$/;"	f	signature:(int sx, int sy, int length, int width, int color)
draw_rectangle	graphics.h	/^void draw_rectangle(int sx, int sy, int length, int width, int color);$/;"	p	signature:(int sx, int sy, int length, int width, int color)
draw_subcard	graphics.c	/^void draw_subcard(int sx, int sy, int row, int col, const char *partRef[], char *color_package)$/;"	f	signature:(int sx, int sy, int row, int col, const char *partRef[], char *color_package)
draw_subcard	graphics.h	/^void draw_subcard(int sx, int sy, int row, int col, const char *partRef[], char *color_package);$/;"	p	signature:(int sx, int sy, int row, int col, const char *partRef[], char *color_package)
draw_text	graphics.c	/^void draw_text(int sx, int sy, const char *text, int color)$/;"	f	signature:(int sx, int sy, const char *text, int color)
draw_text	graphics.h	/^void draw_text(int sx, int sy, const char *text, int color);$/;"	p	signature:(int sx, int sy, const char *text, int color)
draw_vertical_line	graphics.c	/^void draw_vertical_line(int sx, int sy, int width, int color)$/;"	f	signature:(int sx, int sy, int width, int color)
draw_vertical_line	graphics.h	/^void draw_vertical_line(int sx, int sy, int width, int color);$/;"	p	signature:(int sx, int sy, int width, int color)
drvmode	both.h	/^	u32 drvmode;		\/\/ set falsh drive mode feature$/;"	m	struct:usr_config	access:public
drvsetting	both.h	/^	} drvsetting;$/;"	m	struct:usr_flash	typeref:struct:usr_flash::__drvsetting	access:public
dummy_mem	tool.h	/^	struct memory dummy_mem;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::memory	access:public
dw_rsv	both.h	/^	__u32 dw_rsv[3];$/;"	m	struct:hw_sysinfo	access:public
eblocks_in_lun	shannon-mbr.h	/^	u32 eblocks_in_lun;$/;"	m	struct:shannon_mbr	access:public
ecc	tool.h	/^		__u8 ecc[64];	\/* cacheread cmd needs *\/$/;"	m	union:shannon_request::__anon3	access:public
ecc_codewords_in_logicb	shannon-mbr.h	/^	u8 ecc_codewords_in_logicb;$/;"	m	struct:shannon_mbr	access:public
ecc_correction_power	shannon-mbr.h	/^	u8 ecc_correction_power;$/;"	m	struct:shannon_mbr	access:public
ecc_histogram	mpt.c	/^static u64* ecc_histogram;$/;"	v	file:
ecc_mode	both.h	/^	int ecc_mode;$/;"	m	struct:usr_config	access:public
entire_page_size	both.h	/^	int entire_page_size;	\/\/ page_size + oob_size$/;"	m	struct:usr_flash	access:public
erase_scan	bbt.c	/^int erase_scan(struct shannon_dev *dev, struct shannon_bbt *bbt)$/;"	f	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
erase_scan	tool.h	/^extern int erase_scan(struct shannon_dev *dev, struct shannon_bbt *bbt);$/;"	p	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
exit_norflash	nor.c	/^static void exit_norflash(struct norflash *nor)$/;"	f	file:	signature:(struct norflash *nor)
exit_nrand	help.c	/^void exit_nrand(void)$/;"	f	signature:(void)
exit_nrand	tool.h	/^extern void exit_nrand(void);$/;"	p	signature:(void)
exitcode	tool.h	/^	int exitcode;$/;"	m	struct:shannon_dev	access:public
exitlog	tool.h	/^	FILE *exitlog;$/;"	m	struct:shannon_dev	access:public
exitlog	tool.h	444;"	d
exitlog_withstatus	tool.h	435;"	d
factory_ivb	both.h	/^	} factory_ivb[8];$/;"	m	struct:usr_flash	typeref:struct:usr_flash::__factory_ivb	access:public
fblocks	tool.h	/^	int fblocks;			\/* user input flash blocks number *\/$/;"	m	struct:shannon_dev	access:public
fd	tool.h	/^	int fd;$/;"	m	struct:shannon_dev	access:public
feature_flags	shannon-mbr.h	/^	u64 feature_flags;$/;"	m	struct:shannon_mbr	access:public
feature_id	both.h	/^		__u8 feature_id;$/;"	m	struct:flash_id::__anon1	access:public
feature_id	both.h	/^	int feature_id;$/;"	m	struct:usr_flash	access:public
fill_meta_data	api.c	/^static void fill_meta_data(struct shannon_dev *dev, struct shannon_request *head, FILE *mdata_fp)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *head, FILE *mdata_fp)
fill_user_data	api.c	/^static void fill_user_data(struct shannon_dev *dev, struct shannon_request *head, FILE *udata_fp)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *head, FILE *udata_fp)
firmware_tag	both.h	/^	__u32 firmware_tag;$/;"	m	struct:hw_sysinfo	access:public
fixed_ecc_errbits	ecc.c	/^static int fixed_ecc_errbits = -1;	\/\/ !-1 means generate fixed errbits$/;"	v	file:
fixed_ecc_ratio	ecc.c	/^static int fixed_ecc_ratio = -1;	\/\/ !-1 means ratio = 1, otherwise ratio = 1\/fixed_ecc_ratio$/;"	v	file:
flagbyte_scan	bbt.c	/^int flagbyte_scan(struct shannon_dev *dev, struct shannon_bbt *bbt)$/;"	f	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
flagbyte_scan	tool.h	/^extern int flagbyte_scan(struct shannon_dev *dev, struct shannon_bbt *bbt);$/;"	p	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
flash	tool.h	/^	struct usr_flash *flash;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_flash	access:public
flash_bakup	tool.h	/^	struct usr_flash *flash_bakup;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_flash	access:public
flash_drvmode	shannon-mbr.h	/^	u32 flash_drvmode;	\/* output_drive_strength + 1; so 0 is invalid. *\/$/;"	m	struct:shannon_mbr	access:public
flash_id	both.h	/^union flash_id {$/;"	u
flash_id::__anon1::device_id	both.h	/^		__u8 device_id;$/;"	m	struct:flash_id::__anon1	access:public
flash_id::__anon1::feature_id	both.h	/^		__u8 feature_id;$/;"	m	struct:flash_id::__anon1	access:public
flash_id::__anon1::others	both.h	/^		__u8 others[5];$/;"	m	struct:flash_id::__anon1	access:public
flash_id::__anon1::vendor_id	both.h	/^		__u8 vendor_id;$/;"	m	struct:flash_id::__anon1	access:public
flash_id::byteid	both.h	/^	__u8 byteid[8];$/;"	m	union:flash_id	access:public
flash_id::longid	both.h	/^	__u64 longid;$/;"	m	union:flash_id	access:public
flash_ifclock	tool.h	/^	int flash_ifclock;$/;"	m	struct:shannon_dev	access:public
flash_info	parse.c	/^int flash_info(struct shannon_dev *dev, union flash_id fid, struct usr_flash *flash)$/;"	f	signature:(struct shannon_dev *dev, union flash_id fid, struct usr_flash *flash)
flash_info	tool.h	/^extern int flash_info(struct shannon_dev *dev, union flash_id fid, struct usr_flash *flash);$/;"	p	signature:(struct shannon_dev *dev, union flash_id fid, struct usr_flash *flash)
flash_temp_threshold	tool.h	/^	int flash_temp_threshold;$/;"	m	struct:shannon_dev	access:public
flashfile_member	parse.c	/^static int flashfile_member(struct shannon_dev *dev, struct usr_flash *flash, char *name, char *pv)$/;"	f	file:	signature:(struct shannon_dev *dev, struct usr_flash *flash, char *name, char *pv)
for_dev_each_block	tool.h	810;"	d
for_dev_each_bufhead	tool.h	814;"	d
for_dev_each_lun	tool.h	805;"	d
for_dev_each_page	tool.h	812;"	d
free_device	init.c	/^void free_device(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
free_device	tool.h	/^extern void free_device(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
free_live_context	mpt.c	/^static void free_live_context(struct live_context *context)$/;"	f	file:	signature:(struct live_context *context)
free_mem	init.c	/^static void free_mem(struct shannon_dev *dev, struct memory *mem)$/;"	f	file:	signature:(struct shannon_dev *dev, struct memory *mem)
free_mem	tool.h	/^	void (*free_mem)(struct shannon_dev *dev, struct memory *mem);$/;"	m	struct:shannon_dev	access:public
free_request	req.c	/^void free_request(struct shannon_request *req)$/;"	f	signature:(struct shannon_request *req)
free_request	tool.h	/^extern void free_request(struct shannon_request *req);$/;"	p	signature:(struct shannon_request *req)
full_sector_size	both.h	/^	int full_sector_size;$/;"	m	struct:usr_config	access:public
gdev	dio.c	/^struct shannon_dev *gdev;$/;"	v	typeref:struct:shannon_dev
get_board_temp	mpt.c	/^static float get_board_temp(struct shannon_dev *dev) {$/;"	f	file:	signature:(struct shannon_dev *dev)
get_codeword_size_fromhw	parse.c	/^static int get_codeword_size_fromhw(struct shannon_dev *dev, int sector_size, int sector_ncodeword)$/;"	f	file:	signature:(struct shannon_dev *dev, int sector_size, int sector_ncodeword)
get_controller_temp	mpt.c	/^static float get_controller_temp(struct shannon_dev *dev) {$/;"	f	file:	signature:(struct shannon_dev *dev)
get_data_buf	ecc.c	766;"	d	file:
get_dev_domains	init.c	/^static void get_dev_domains(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
get_flash_temp	mpt.c	/^static float get_flash_temp(struct shannon_dev *dev) {$/;"	f	file:	signature:(struct shannon_dev *dev)
get_flashlib_section	parse.c	/^static int get_flashlib_section(union flash_id fid, char *section)$/;"	f	file:	signature:(union flash_id fid, char *section)
get_group_address	api.c	/^static int get_group_address(struct shannon_dev *dev, char *s, int *lun, int *block, int *page)$/;"	f	file:	signature:(struct shannon_dev *dev, char *s, int *lun, int *block, int *page)
get_mem	init.c	/^static void get_mem(struct shannon_dev *dev, struct memory *mem)$/;"	f	file:	signature:(struct shannon_dev *dev, struct memory *mem)
get_mem	tool.h	/^	void (*get_mem)(struct shannon_dev *dev, struct memory *mem);$/;"	m	struct:shannon_dev	access:public
get_nrand	help.c	/^int get_nrand(int idx)$/;"	f	signature:(int idx)
get_nrand	tool.h	/^extern int get_nrand(int idx);$/;"	p	signature:(int idx)
get_phychannel	tool.h	/^static inline int get_phychannel(struct shannon_dev *dev, int loglun)$/;"	f	signature:(struct shannon_dev *dev, int loglun)
get_phylun	tool.h	/^static inline int get_phylun(struct shannon_dev *dev, int loglun)$/;"	f	signature:(struct shannon_dev *dev, int loglun)
get_phythread	tool.h	/^static inline int get_phythread(struct shannon_dev *dev, int loglun)$/;"	f	signature:(struct shannon_dev *dev, int loglun)
get_pkg_color	graphics.c	/^int get_pkg_color(const unsigned char *pkg, char (*phy_lun_map_color)[256])$/;"	f	signature:(const unsigned char *pkg, char (*phy_lun_map_color)[256])
get_pkg_color	graphics.h	/^int get_pkg_color(const unsigned char *pkg, char (*phy_lun_map_color)[256]);$/;"	p	signature:(const unsigned char *pkg, char (*phy_lun_map_color)[256])
get_pkg_index	ifmode.c	/^int get_pkg_index(int phylun, const unsigned char pkg_phylun_num[][8+PKG_ATTR], int HLBYTE)$/;"	f	signature:(int phylun, const unsigned char pkg_phylun_num[][8+PKG_ATTR], int HLBYTE)
get_steprd	ifmode.c	/^static __u8 *get_steprd(struct shannon_dev *dev, struct shannon_request *rdhead, int off, int type)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *rdhead, int off, int type)
get_stepwr	ifmode.c	/^static __u8 *get_stepwr(struct shannon_dev *dev, struct shannon_request *wrhead, int off, int type)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *wrhead, int off, int type)
getseed	tool.h	/^static inline int getseed(int way)$/;"	f	signature:(int way)
glist	tool.h	/^	struct list_head glist;$/;"	m	struct:memory	typeref:struct:memory::list_head	access:public
group_raid_luns	tool.h	/^	int group_raid_luns;$/;"	m	struct:shannon_dev	access:public
group_raid_num	tool.h	/^	int group_raid_num;$/;"	m	struct:shannon_dev	access:public
hardware_version	both.h	/^	u32 hardware_version;$/;"	m	struct:usr_config	access:public
hardware_version	shannon-mbr.h	/^	u64 hardware_version;$/;"	m	struct:shannon_mbr	access:public
has_advance_read	tool.h	/^	int has_advance_read;$/;"	m	struct:shannon_dev	access:public
has_secondary_cmd	api.c	/^	int has_secondary_cmd;$/;"	m	struct:wr_flash_regs	file:	access:public
head	both.h	/^	__u8 head;$/;"	m	struct:sh_bufwrite	access:public
head	both.h	/^	__u8 head;$/;"	m	struct:sh_cacheread	access:public
head	both.h	/^	__u8 head;$/;"	m	struct:sh_erase	access:public
head	both.h	/^	__u8 head;$/;"	m	struct:sh_preread	access:public
head	both.h	/^	__u8 head;$/;"	m	struct:sh_raidinit	access:public
head	both.h	/^	__u8 head;$/;"	m	struct:sh_raidwrite	access:public
head	both.h	/^	__u8 head;$/;"	m	struct:sh_write	access:public
head	both.h	/^	int head;$/;"	m	struct:direct_io	access:public
head	tool.h	/^	int head;		\/* first cmd head of this lun *\/$/;"	m	struct:shannon_lun	access:public
head	tool.h	/^	int head;$/;"	m	struct:shannon_request	access:public
hi_col	both.h	/^		int hi_col;$/;"	m	struct:usr_flash::__factory_ivb	access:public
hide_cursor	graphics.h	16;"	d
high_low_byte	graphics.h	/^enum high_low_byte {$/;"	g
history_erase_count	shannon-mbr.h	/^	u32 history_erase_count;$/;"	m	struct:shannon_mbr	access:public
host_read_sectors	shannon-mbr.h	/^	u64 host_read_sectors;$/;"	m	struct:shannon_mbr	access:public
host_write_sectors	shannon-mbr.h	/^	u64 host_write_sectors;$/;"	m	struct:shannon_mbr	access:public
human_bbt_info	bbt.c	/^void human_bbt_info(char *bbtfile)$/;"	f	signature:(char *bbtfile)
human_bbt_info	tool.h	/^extern void human_bbt_info(char *bbtfile);$/;"	p	signature:(char *bbtfile)
human_luninfo_info	bbt.c	/^void human_luninfo_info(char *luninfo_file)$/;"	f	signature:(char *luninfo_file)
human_luninfo_info	tool.h	/^extern void human_luninfo_info(char *luninfo_file);$/;"	p	signature:(char *luninfo_file)
hw_blk_npage	both.h	/^	__u8 hw_blk_npage;		\/\/ number of page per block divided by 64 minus 1$/;"	m	struct:hw_config	access:public
hw_chunk_nbyte	both.h	/^	__u8 hw_chunk_nbyte;		\/\/ number of byte per data chunk divided by 512 minus 1$/;"	m	struct:hw_config	access:public
hw_chunk_nsector	both.h	/^	__u8 hw_chunk_nsector;		\/\/ number of sector per chunk minus 1$/;"	m	struct:hw_config	access:public
hw_codeword_nbyte	both.h	/^	__u16 hw_codeword_nbyte;	\/\/ number of bytes per ecc codeword, readonly$/;"	m	struct:hw_config	access:public
hw_config	both.h	/^struct hw_config {$/;"	s
hw_config	tool.h	/^	struct hw_config *hw_config;	\/* hardware config registers, must be synchronized with HW *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::hw_config	access:public
hw_config::dam_read_limit	both.h	/^	__u8 dam_read_limit;$/;"	m	struct:hw_config	access:public
hw_config::hw_blk_npage	both.h	/^	__u8 hw_blk_npage;		\/\/ number of page per block divided by 64 minus 1$/;"	m	struct:hw_config	access:public
hw_config::hw_chunk_nbyte	both.h	/^	__u8 hw_chunk_nbyte;		\/\/ number of byte per data chunk divided by 512 minus 1$/;"	m	struct:hw_config	access:public
hw_config::hw_chunk_nsector	both.h	/^	__u8 hw_chunk_nsector;		\/\/ number of sector per chunk minus 1$/;"	m	struct:hw_config	access:public
hw_config::hw_codeword_nbyte	both.h	/^	__u16 hw_codeword_nbyte;	\/\/ number of bytes per ecc codeword, readonly$/;"	m	struct:hw_config	access:public
hw_config::hw_dw3_rsv	both.h	/^	__u8 hw_dw3_rsv;$/;"	m	struct:hw_config	access:public
hw_config::hw_dw5_rsv	both.h	/^	__u8 hw_dw5_rsv;$/;"	m	struct:hw_config	access:public
hw_config::hw_dw6_srv	both.h	/^	__u32 hw_dw6_srv;$/;"	m	struct:hw_config	access:public
hw_config::hw_ecc_mode	both.h	/^	__u8 hw_ecc_mode;		\/\/ 0-no bypass; 1-bypass ecc\/crc\/scrambler; 2-bypass scrambler only$/;"	m	struct:hw_config	access:public
hw_config::hw_ecc_power	both.h	/^	__u8 hw_ecc_power;		\/\/ ecc power of 1st stage$/;"	m	struct:hw_config	access:public
hw_config::hw_full_page_nbyte	both.h	/^	__u16 hw_full_page_nbyte;	\/\/ number of byte per full page$/;"	m	struct:hw_config	access:public
hw_config::hw_full_sector_nbyte	both.h	/^	__u16 hw_full_sector_nbyte;	\/\/ number of byte per full sector$/;"	m	struct:hw_config	access:public
hw_config::hw_ifmode_and_timing	both.h	/^	__u8 hw_ifmode_and_timing;	\/\/ [0:3]ifmode and [7:4]timing cycles$/;"	m	struct:hw_config	access:public
hw_config::hw_int_delay	both.h	/^	__u8 hw_int_delay;		\/\/ interrput delay in us$/;"	m	struct:hw_config	access:public
hw_config::hw_lun_mask	both.h	/^	__u8 hw_lun_mask;$/;"	m	struct:hw_config	access:public
hw_config::hw_page_nsector	both.h	/^	__u8 hw_page_nsector;		\/\/ number of sectors per page minus 1$/;"	m	struct:hw_config	access:public
hw_config::hw_plane_mask	both.h	/^	__u8 hw_plane_mask;		\/\/ plane mask shifted by 6$/;"	m	struct:hw_config	access:public
hw_config::hw_power_budget	both.h	/^	__u8 hw_power_budget;$/;"	m	struct:hw_config	access:public
hw_config::hw_raid_enable	both.h	/^	__u8 hw_raid_enable;		\/\/ 0-enable, 1-disable$/;"	m	struct:hw_config	access:public
hw_config::hw_reset	both.h	/^	__u8 hw_reset;			\/\/ reset hw$/;"	m	struct:hw_config	access:public
hw_config::hw_sector_nbyte	both.h	/^	__u8 hw_sector_nbyte;		\/\/ bytes per sector, 1-512 2-1024 4-2048 8-4096$/;"	m	struct:hw_config	access:public
hw_config::hw_sector_ncodeword	both.h	/^	__u8 hw_sector_ncodeword;	\/\/ number of ecc codeword per sector$/;"	m	struct:hw_config	access:public
hw_config::hw_seed_in3432	both.h	/^	__u8 hw_seed_in3432;$/;"	m	struct:hw_config	access:public
hw_config::max_ecc_limit	both.h	/^	__u8 max_ecc_limit;$/;"	m	struct:hw_config	access:public
hw_config::throttle_limit	both.h	/^	__u8 throttle_limit;$/;"	m	struct:hw_config	access:public
hw_config::user_mask	both.h	/^	__u8 user_mask;$/;"	m	struct:hw_config	access:public
hw_dbuf_raid_support	both.h	/^	__u8 hw_dbuf_raid_support;	\/\/ double buffer in RAID parity$/;"	m	struct:hw_sysinfo	access:public
hw_dw2_rsv	both.h	/^	__u8 hw_dw2_rsv[2];$/;"	m	struct:hw_sysinfo	access:public
hw_dw3_rsv	both.h	/^	__u8 hw_dw3_rsv;$/;"	m	struct:hw_config	access:public
hw_dw3_rsv	both.h	/^	__u8 hw_dw3_rsv[2];$/;"	m	struct:hw_sysinfo	access:public
hw_dw5_rsv	both.h	/^	__u8 hw_dw5_rsv;$/;"	m	struct:hw_config	access:public
hw_dw6_srv	both.h	/^	__u32 hw_dw6_srv;$/;"	m	struct:hw_config	access:public
hw_ecc_mode	both.h	/^	__u8 hw_ecc_mode;		\/\/ 0-no bypass; 1-bypass ecc\/crc\/scrambler; 2-bypass scrambler only$/;"	m	struct:hw_config	access:public
hw_ecc_mode	both.h	/^	__u8 hw_ecc_mode;		\/\/ ecc mode$/;"	m	struct:hw_sysinfo	access:public
hw_ecc_power	both.h	/^	__u8 hw_ecc_power;		\/\/ ecc power of 1st stage$/;"	m	struct:hw_config	access:public
hw_ecc_tmode	both.h	/^	__u8 hw_ecc_tmode;		\/\/ ecc mode$/;"	m	struct:hw_sysinfo	access:public
hw_full_page_nbyte	both.h	/^	__u16 hw_full_page_nbyte;	\/\/ number of byte per full page$/;"	m	struct:hw_config	access:public
hw_full_sector_nbyte	both.h	/^	__u16 hw_full_sector_nbyte;	\/\/ number of byte per full sector$/;"	m	struct:hw_config	access:public
hw_if_support	both.h	/^	__u8 hw_if_support;		\/\/ which ifmode supported$/;"	m	struct:hw_sysinfo	access:public
hw_ifmode_and_timing	both.h	/^	__u8 hw_ifmode_and_timing;	\/\/ [0:3]ifmode and [7:4]timing cycles$/;"	m	struct:hw_config	access:public
hw_int_delay	both.h	/^	__u8 hw_int_delay;		\/\/ interrput delay in us$/;"	m	struct:hw_config	access:public
hw_lun_mask	both.h	/^	__u8 hw_lun_mask;$/;"	m	struct:hw_config	access:public
hw_luns	tool.h	/^	int hw_luns;$/;"	m	struct:shannon_dev	access:public
hw_misc_1	both.h	/^	__u8 hw_misc_1;$/;"	m	struct:hw_sysinfo	access:public
hw_nchannel	both.h	/^	__u8 hw_nchannel;		\/\/ number of channels supported$/;"	m	struct:hw_sysinfo	access:public
hw_nchannel	tool.h	/^	int hw_nchannel;$/;"	m	struct:shannon_dev	access:public
hw_nlun	tool.h	/^	int hw_nlun;$/;"	m	struct:shannon_dev	access:public
hw_nraid_head	both.h	/^	__u8 hw_nraid_head;		\/\/ number of concurrent heads in RAID$/;"	m	struct:hw_sysinfo	access:public
hw_nthread	tool.h	/^	int hw_nthread;$/;"	m	struct:shannon_dev	access:public
hw_nthread_nlun	both.h	/^	__u8 hw_nthread_nlun;		\/\/ number of threads[0:3] and number of luns minus 1[4:7]$/;"	m	struct:hw_sysinfo	access:public
hw_nwrbuf	both.h	/^	__u8 hw_nwrbuf;			\/\/ number of buffers$/;"	m	struct:hw_sysinfo	access:public
hw_page_nsector	both.h	/^	__u8 hw_page_nsector;		\/\/ number of sectors per page minus 1$/;"	m	struct:hw_config	access:public
hw_plane_mask	both.h	/^	__u8 hw_plane_mask;		\/\/ plane mask shifted by 6$/;"	m	struct:hw_config	access:public
hw_power_budget	both.h	/^	__u8 hw_power_budget;$/;"	m	struct:hw_config	access:public
hw_raid_enable	both.h	/^	__u8 hw_raid_enable;		\/\/ 0-enable, 1-disable$/;"	m	struct:hw_config	access:public
hw_raid_support	both.h	/^	__u8 hw_raid_support;		\/\/ raid support$/;"	m	struct:hw_sysinfo	access:public
hw_reset	both.h	/^	__u8 hw_reset;			\/\/ reset hw$/;"	m	struct:hw_config	access:public
hw_sector_nbyte	both.h	/^	__u8 hw_sector_nbyte;		\/\/ bytes per sector, 1-512 2-1024 4-2048 8-4096$/;"	m	struct:hw_config	access:public
hw_sector_ncodeword	both.h	/^	__u8 hw_sector_ncodeword;	\/\/ number of ecc codeword per sector$/;"	m	struct:hw_config	access:public
hw_seed_in3432	both.h	/^	__u8 hw_seed_in3432;$/;"	m	struct:hw_config	access:public
hw_sysinfo	both.h	/^struct hw_sysinfo {$/;"	s
hw_sysinfo	tool.h	/^	struct hw_sysinfo *hw_sysinfo;	\/* hareware system registers, must be synchronized with HW *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::hw_sysinfo	access:public
hw_sysinfo::dw_rsv	both.h	/^	__u32 dw_rsv[3];$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::firmware_tag	both.h	/^	__u32 firmware_tag;$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_dbuf_raid_support	both.h	/^	__u8 hw_dbuf_raid_support;	\/\/ double buffer in RAID parity$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_dw2_rsv	both.h	/^	__u8 hw_dw2_rsv[2];$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_dw3_rsv	both.h	/^	__u8 hw_dw3_rsv[2];$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_ecc_mode	both.h	/^	__u8 hw_ecc_mode;		\/\/ ecc mode$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_ecc_tmode	both.h	/^	__u8 hw_ecc_tmode;		\/\/ ecc mode$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_if_support	both.h	/^	__u8 hw_if_support;		\/\/ which ifmode supported$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_misc_1	both.h	/^	__u8 hw_misc_1;$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_nchannel	both.h	/^	__u8 hw_nchannel;		\/\/ number of channels supported$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_nraid_head	both.h	/^	__u8 hw_nraid_head;		\/\/ number of concurrent heads in RAID$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_nthread_nlun	both.h	/^	__u8 hw_nthread_nlun;		\/\/ number of threads[0:3] and number of luns minus 1[4:7]$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_nwrbuf	both.h	/^	__u8 hw_nwrbuf;			\/\/ number of buffers$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_raid_support	both.h	/^	__u8 hw_raid_support;		\/\/ raid support$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_version	both.h	/^	__u8 hw_version;		\/\/ hareware version$/;"	m	struct:hw_sysinfo	access:public
hw_sysinfo::hw_wrbuf_support	both.h	/^	__u8 hw_wrbuf_support;		\/\/ write buffer support$/;"	m	struct:hw_sysinfo	access:public
hw_threads	tool.h	/^	int hw_threads;$/;"	m	struct:shannon_dev	access:public
hw_version	both.h	/^	__u8 hw_version;		\/\/ hareware version$/;"	m	struct:hw_sysinfo	access:public
hw_wrbuf_support	both.h	/^	__u8 hw_wrbuf_support;		\/\/ write buffer support$/;"	m	struct:hw_sysinfo	access:public
id	both.h	/^	union flash_id id;$/;"	m	struct:usr_flash	typeref:union:usr_flash::flash_id	access:public
id	shannon-mbr.h	/^	char id[32];$/;"	m	struct:shannon_mbr	access:public
id	tool.h	/^		__u8 id[8];	\/* readid cmd needs *\/$/;"	m	union:shannon_request::__anon3	access:public
id	tool.h	/^		union flash_id id;$/;"	m	struct:shannon_dev::target_lun	typeref:union:shannon_dev::target_lun::flash_id	access:public
id	tool.h	/^	char id[32];$/;"	m	struct:live_context	access:public
idx	tool.h	/^	int idx;$/;"	m	struct:shannon_super_block	access:public
ifmode	both.h	/^	int ifmode;		\/\/ flash ifmode$/;"	m	struct:usr_flash	access:public
ifmode	both.h	/^	int ifmode;		\/\/ interface mode, 0:async ONFI; 1:toggle; 2:unused; 3:sync ONFI$/;"	m	struct:usr_config	access:public
ifmode	tool.h	/^	int ifmode;			\/* present both HW and flash interface mode *\/$/;"	m	struct:shannon_dev	access:public
ifmode_string	tool.h	/^static inline char *ifmode_string(int ifmode)$/;"	f	signature:(int ifmode)
inherent_mbr	tool.h	/^	struct shannon_mbr *inherent_mbr;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_mbr	access:public
inherent_mbr_sector_size	tool.h	/^	int inherent_mbr_sector_size;$/;"	m	struct:shannon_dev	access:public
init_cold_sblk	shannon-mbr.h	/^	u32 init_cold_sblk;$/;"	m	struct:shannon_mbr	access:public
init_device	init.c	/^int init_device(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
init_device	tool.h	/^extern int init_device(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
init_done	tool.h	/^	int init_done;$/;"	m	struct:shannon_dev	access:public
init_hot_sblk	shannon-mbr.h	/^	u32 init_hot_sblk;$/;"	m	struct:shannon_mbr	access:public
init_mode	tool.h	/^	int init_mode;			\/* 0, normal init; 1, use present hw config *\/$/;"	m	struct:shannon_dev	access:public
init_norflash	nor.c	/^static struct norflash *init_norflash(char *name)$/;"	f	file:	signature:(char *name)
init_nrand	help.c	/^void init_nrand(int num, int seed)$/;"	f	signature:(int num, int seed)
init_nrand	tool.h	/^extern void init_nrand(int num, int seed);$/;"	p	signature:(int num, int seed)
interactive_config	parse.c	/^static void interactive_config(struct shannon_dev *dev, FILE *fp)$/;"	f	file:	signature:(struct shannon_dev *dev, FILE *fp)
interrupt_delay	shannon-mbr.h	/^	u16 interrupt_delay;	\/* default to 1 *\/$/;"	m	struct:shannon_mbr	access:public
interrupt_delay	tool.h	/^	int interrupt_delay;$/;"	m	struct:shannon_dev	access:public
invalid_blocks	tool.h	/^	int invalid_blocks;$/;"	m	struct:shannon_dev	access:public
ioread32	init.c	/^static __u32 ioread32(struct shannon_dev *dev, int dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, int dwoff)
ioread32	tool.h	/^	__u32 (*ioread32)(struct shannon_dev *dev, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
ioread_buflunreg	init.c	/^static __u32 ioread_buflunreg(struct shannon_dev *dev, int head, enum HW_lunreg dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, int head, enum HW_lunreg dwoff)
ioread_buflunreg	tool.h	/^	__u32 (*ioread_buflunreg)(struct shannon_dev *dev, int head, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
ioread_config	init.c	/^static void ioread_config(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
ioread_config	tool.h	/^	void (*ioread_config)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
ioread_lunreg	init.c	/^static __u32 ioread_lunreg(struct shannon_dev *dev, int lun, enum HW_lunreg dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, int lun, enum HW_lunreg dwoff)
ioread_lunreg	tool.h	/^	__u32 (*ioread_lunreg)(struct shannon_dev *dev, int lun, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
iowidth	tool.h	/^	int iowidth;			\/* 1, 8bit; 2, 16bit *\/$/;"	m	struct:shannon_dev	access:public
iowrite32	init.c	/^static void iowrite32(struct shannon_dev *dev, __u32 value, int dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 value, int dwoff)
iowrite32	tool.h	/^	void (*iowrite32)(struct shannon_dev *dev, __u32 value, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
iowrite_buflunreg	init.c	/^static void iowrite_buflunreg(struct shannon_dev *dev, __u32 value, int head, enum HW_lunreg dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 value, int head, enum HW_lunreg dwoff)
iowrite_buflunreg	tool.h	/^	void (*iowrite_buflunreg)(struct shannon_dev *dev, __u32 value, int head, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
iowrite_config	init.c	/^static void iowrite_config(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
iowrite_config	tool.h	/^	void (*iowrite_config)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
iowrite_lunreg	init.c	/^static void iowrite_lunreg(struct shannon_dev *dev, __u32 value, int lun, enum HW_lunreg dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 value, int lun, enum HW_lunreg dwoff)
iowrite_lunreg	tool.h	/^	void (*iowrite_lunreg)(struct shannon_dev *dev, __u32 value, int lun, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
is_bad_lun	lost/reqlist.c	/^int is_bad_lun(struct shannon_dev *dev, int block, int lun)$/;"	f	signature:(struct shannon_dev *dev, int block, int lun)
is_bad_lunblock	tool.h	/^static inline int is_bad_lunblock(struct shannon_dev *dev, int lun, int blk)$/;"	f	signature:(struct shannon_dev *dev, int lun, int blk)
is_bad_superblock	tool.h	/^static inline int is_bad_superblock(struct shannon_dev *dev, int superblk)$/;"	f	signature:(struct shannon_dev *dev, int superblk)
kernel_addr	both.h	/^	void *kernel_addr;$/;"	m	struct:shannon_ioctl	access:public
kernel_addr	both.h	/^	void *kernel_addr;$/;"	m	struct:thread_mem	access:public
kernel_addr	tool.h	/^	void *kernel_addr;$/;"	m	struct:memory	access:public
last_cacheread	tool.h	/^	int last_cacheread;$/;"	m	struct:shannon_request	access:public
le16_to_cpu	tool.h	829;"	d
le16_to_cpu	tool.h	845;"	d
le16_to_cpus	tool.h	833;"	d
le16_to_cpus	tool.h	849;"	d
le32_to_cpu	tool.h	830;"	d
le32_to_cpu	tool.h	846;"	d
le32_to_cpus	tool.h	834;"	d
le32_to_cpus	tool.h	850;"	d
le64_to_cpu	tool.h	831;"	d
le64_to_cpu	tool.h	847;"	d
le64_to_cpus	tool.h	835;"	d
le64_to_cpus	tool.h	851;"	d
limitppa	both.h	/^	int limitppa;$/;"	m	struct:direct_io	access:public
list	tool.h	/^	struct list_head list;$/;"	m	struct:memory	typeref:struct:memory::list_head	access:public
list	tool.h	/^	struct list_head list;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_cut_position	list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head, struct list_head *entry)
list_del	list.h	/^extern void list_del(struct list_head *entry);$/;"	p	signature:(struct list_head *entry)
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_entry	list.h	402;"	d
list_first_entry	list.h	413;"	d
list_for_each	list.h	421;"	d
list_for_each_entry	list.h	470;"	d
list_for_each_entry_continue	list.h	506;"	d
list_for_each_entry_continue_reverse	list.h	520;"	d
list_for_each_entry_from	list.h	533;"	d
list_for_each_entry_reverse	list.h	481;"	d
list_for_each_entry_safe	list.h	544;"	d
list_for_each_entry_safe_continue	list.h	560;"	d
list_for_each_entry_safe_from	list.h	576;"	d
list_for_each_entry_safe_reverse	list.h	591;"	d
list_for_each_prev	list.h	440;"	d
list_for_each_prev_safe	list.h	459;"	d
list_for_each_safe	list.h	449;"	d
list_head	list.h	/^struct list_head{$/;"	s
list_head::next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
list_head::prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
list_is_last	list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f	signature:(const struct list_head *list, const struct list_head *head)
list_is_singular	list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_prepare_entry	list.h	494;"	d
list_replace	list.h	/^static inline void list_replace(struct list_head *old,$/;"	f	signature:(struct list_head *old, struct list_head *new)
list_replace_init	list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f	signature:(struct list_head *old, struct list_head *new)
list_rotate_left	list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f	signature:(struct list_head *head)
list_safe_reset_next	list.h	609;"	d
list_splice	list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f	signature:(const struct list_head *list, struct list_head *head)
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_tail	list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_tail_init	list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
live_context	tool.h	/^struct live_context {$/;"	s
live_context::cmdq	tool.h	/^	__u64 **cmdq;$/;"	m	struct:live_context	access:public
live_context::cmpq	tool.h	/^	__u64 **cmpq;$/;"	m	struct:live_context	access:public
live_context::dev	tool.h	/^	struct shannon_dev *dev;$/;"	m	struct:live_context	typeref:struct:live_context::shannon_dev	access:public
live_context::id	tool.h	/^	char id[32];$/;"	m	struct:live_context	access:public
live_context::reg	tool.h	/^	__u32 *reg;$/;"	m	struct:live_context	access:public
lo_col	both.h	/^		int lo_col;	\/\/ factory invalid block mark`s low and high column off in page$/;"	m	struct:usr_flash::__factory_ivb	access:public
load_cursor	graphics.h	13;"	d
log2phy_lun	tool.h	/^static inline int log2phy_lun(struct shannon_dev *dev, int loglun)$/;"	f	signature:(struct shannon_dev *dev, int loglun)
logicb_shift	shannon-mbr.h	/^	u32 logicb_shift;$/;"	m	struct:shannon_mbr	access:public
loglun	tool.h	/^		int loglun;$/;"	m	struct:shannon_dev::target_lun	access:public
loglun	tool.h	/^	int loglun;$/;"	m	struct:shannon_lun	access:public
logout	ifmode.c	304;"	d	file:
logout	mpt.c	1993;"	d	file:
longid	both.h	/^	__u64 longid;$/;"	m	union:flash_id	access:public
loops	tool.h	/^	int loops;$/;"	m	struct:shannon_dev	access:public
lun	both.h	/^	__u8 lun;$/;"	m	struct:sh_bufwrite	access:public
lun	both.h	/^	__u8 lun;$/;"	m	struct:sh_readid	access:public
lun	both.h	/^	__u8 lun;$/;"	m	struct:sh_reset	access:public
lun	tool.h	/^	int lun;$/;"	m	struct:shannon_request	access:public
lun	tool.h	/^	struct shannon_lun *lun;	\/* per-lun manage structure *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_lun	access:public
lun_amount	shannon-mbr.h	/^	u32 lun_amount;$/;"	m	struct:shannon_mbr	access:public
lun_bitmap	tool.h	/^	unsigned long lun_bitmap[32];	\/* invalid lun bitmap: 0 valid; 1 invalid*\/$/;"	m	struct:shannon_dev	access:public
lun_bitmap_backup	tool.h	/^	unsigned long lun_bitmap_backup[32];$/;"	m	struct:shannon_dev	access:public
lun_list	tool.h	/^		struct list_head lun_list;	\/* link req mounted on this lun *\/$/;"	m	union:shannon_request::__anon4	typeref:struct:shannon_request::__anon4::list_head	access:public
lun_map_mode	shannon-mbr.h	/^	u8 lun_map_mode;$/;"	m	struct:shannon_mbr	access:public
lun_mask	both.h	/^	int lun_mask;		\/\/ the value write to hw_config$/;"	m	struct:usr_config	access:public
lun_mask	both.h	/^	int lun_mask;$/;"	m	struct:usr_flash	access:public
lunreg_dwoff	tool.h	/^	int lunreg_dwoff;$/;"	m	struct:shannon_dev	access:public
lunreg_dwsize	tool.h	/^	int lunreg_dwsize;$/;"	m	struct:shannon_dev	access:public
luns	both.h	/^	int luns;		\/\/ nchannel * nthread * nlun;$/;"	m	struct:usr_config	access:public
luns	tool.h	/^	int luns;$/;"	m	struct:shannon_sb_luninfo	access:public
luns_per_ce_mask	shannon-mbr.h	/^	u8 luns_per_ce_mask;$/;"	m	struct:shannon_mbr	access:public
magic_number	tool.h	/^	u64 magic_number;$/;"	m	struct:norflash_info	access:public
main	main.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
make_shead_reqlist	lost/reqlist.c	/^struct list_head *make_shead_reqlist(struct shannon_dev *dev, int lun, int block, int head, int seed)$/;"	f	signature:(struct shannon_dev *dev, int lun, int block, int head, int seed)
make_shead_reqlist	tool.h	/^extern struct list_head *make_shead_reqlist(struct shannon_dev *dev, int lun, int block, int head, int seed);$/;"	p	signature:(struct shannon_dev *dev, int lun, int block, int head, int seed)
malloc_failed_exit	tool.h	430;"	d
manual_nplane	tool.h	/^	int manual_nplane;$/;"	m	struct:shannon_dev	access:public
map_device_node	main.c	/^static char *map_device_node(char *s)$/;"	f	file:	signature:(char *s)
max_board_temp	tool.h	/^	float max_board_temp;$/;"	m	struct:shannon_dev	access:public
max_controller_temp	tool.h	/^	float max_controller_temp;$/;"	m	struct:shannon_dev	access:public
max_ecc_errbits	ecc.c	/^static int max_ecc_errbits = -1;	\/\/ !-1 means generate rand errbits in the randge of [0, max_ecc_errbits]$/;"	v	file:
max_ecc_limit	both.h	/^	__u8 max_ecc_limit;$/;"	m	struct:hw_config	access:public
max_flash_temp	tool.h	/^	float max_flash_temp;$/;"	m	struct:shannon_dev	access:public
max_outstanding_bios	shannon-mbr.h	/^	u32 max_outstanding_bios;$/;"	m	struct:shannon_mbr	access:public
max_outstanding_bios	tool.h	/^	int max_outstanding_bios;$/;"	m	struct:shannon_dev	access:public
max_pages_in_eblock	shannon-mbr.h	/^	u32 max_pages_in_eblock;$/;"	m	struct:shannon_mbr	access:public
maxplanes	tool.h	/^	int maxplanes;			\/* maxplanes supported for the flash attached *\/$/;"	m	struct:shannon_dev	access:public
mbr	tool.h	/^	struct shannon_mbr *mbr;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_mbr	access:public
mbr_by_4k	tool.h	/^	int mbr_by_4k;$/;"	m	struct:shannon_dev	access:public
mbr_version	shannon-mbr.h	/^	u64 mbr_version;$/;"	m	struct:shannon_mbr	access:public
mbr_version	tool.h	/^	u64 mbr_version;$/;"	m	struct:shannon_dev	access:public
mem_glisthead	tool.h	/^	struct list_head mem_glisthead;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::list_head	access:public
mem_listhead	tool.h	/^	struct list_head mem_listhead;	\/* head of memory recording kernel_addr and dma_addr *\/$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
memcmp_hlbyte	ifmode.c	/^static int memcmp_hlbyte(__u8 *buf1, __u8 *buf2, unsigned int count, int HLBYTE)$/;"	f	file:	signature:(__u8 *buf1, __u8 *buf2, unsigned int count, int HLBYTE)
memory	tool.h	/^struct memory {$/;"	s
memory::dma_addr	tool.h	/^	dma_addr_t dma_addr;$/;"	m	struct:memory	access:public
memory::glist	tool.h	/^	struct list_head glist;$/;"	m	struct:memory	typeref:struct:memory::list_head	access:public
memory::kernel_addr	tool.h	/^	void *kernel_addr;$/;"	m	struct:memory	access:public
memory::list	tool.h	/^	struct list_head list;$/;"	m	struct:memory	typeref:struct:memory::list_head	access:public
memory::size	tool.h	/^	int size;$/;"	m	struct:memory	access:public
memxor	tool.h	/^static inline void memxor(void *dst, void *src, int cnt)$/;"	f	signature:(void *dst, void *src, int cnt)
metadata	both.h	/^		__u64 metadata;$/;"	m	struct:sh_write::sh_write_sector	access:public
metadata	both.h	/^	__u64 metadata;$/;"	m	struct:sh_bufwrite	access:public
metadata	tool.h	/^	__u64 *metadata;	\/* cacheread needs *\/$/;"	m	struct:shannon_request	access:public
micron_19_microcode_table	microcode.c	/^static u32 micron_19_microcode_table[] = {$/;"	v	file:
mixed_flash_check	init.c	/^static int mixed_flash_check(struct shannon_dev *dev, int lun, struct usr_flash *flash)$/;"	f	file:	signature:(struct shannon_dev *dev, int lun, struct usr_flash *flash)
mk_rand_erase_req	lost/reqlist.c	/^static struct shannon_request *mk_rand_erase_req(struct shannon_dev *dev, int lun)$/;"	f	file:	signature:(struct shannon_dev *dev, int lun)
mk_rand_preread_req	lost/reqlist.c	/^static struct shannon_request *mk_rand_preread_req(struct shannon_dev *dev, int lun)$/;"	f	file:	signature:(struct shannon_dev *dev, int lun)
mk_write_req	lost/reqlist.c	/^static struct shannon_request *mk_write_req(struct shannon_dev *dev, int lun, int ppa, int head)$/;"	f	file:	signature:(struct shannon_dev *dev, int lun, int ppa, int head)
mmode	tool.h	/^	int mmode;$/;"	m	struct:shannon_dev	access:public
model_id	tool.h	/^	char model_id[40];$/;"	m	struct:norflash_info	access:public
move_down	graphics.h	6;"	d
move_left	graphics.h	8;"	d
move_right	graphics.h	7;"	d
move_up	graphics.h	5;"	d
moveto_head	graphics.h	9;"	d
mpt_begintime	tool.h	/^	time_t mpt_begintime;$/;"	m	struct:shannon_dev	access:public
mpt_build_sb_luninfo	mpt.c	/^static void mpt_build_sb_luninfo(struct shannon_dev *dev, struct shannon_bbt *bbt)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
mpt_print_mbr	mpt.c	/^static void mpt_print_mbr(struct shannon_dev *dev, struct shannon_mbr *mbr)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_mbr *mbr)
mpt_scan_bbt_advance	mpt.c	/^static void mpt_scan_bbt_advance(struct shannon_dev *dev, struct shannon_bbt *bbt)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
mpt_scan_mbr_bbt	mpt.c	/^static void mpt_scan_mbr_bbt(struct shannon_dev *dev, struct shannon_bbt *mbr_bbt, int new)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *mbr_bbt, int new)
mpt_scan_mbr_bbt_basic	mpt.c	/^static void mpt_scan_mbr_bbt_basic(struct shannon_dev *dev, struct shannon_bbt *mbr_bbt, int new)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *mbr_bbt, int new)
mpt_set_capacity	tool.h	/^	unsigned long mpt_set_capacity;$/;"	m	struct:shannon_dev	access:public
mpt_setbbt_from_file	mpt.c	/^static void mpt_setbbt_from_file(struct shannon_dev *dev, struct shannon_bbt *bbt, FILE *fp)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt, FILE *fp)
mpt_setvalue_mbr	mpt.c	/^static void mpt_setvalue_mbr(struct shannon_dev *dev, struct shannon_mbr *mbr)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_mbr *mbr)
mpt_setvalue_mbr_from_file	mpt.c	/^static void mpt_setvalue_mbr_from_file(struct shannon_dev *dev, struct shannon_mbr *mbr, FILE *fp)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_mbr *mbr, FILE *fp)
mpt_timetook	tool.h	/^	char mpt_timetook[256];$/;"	m	struct:shannon_dev	access:public
mpt_write_bbt	mpt.c	/^static void mpt_write_bbt(struct shannon_dev *dev, struct shannon_bbt *bbt)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_bbt *bbt)
mpt_write_mbr	mpt.c	/^static void mpt_write_mbr(struct shannon_dev *dev, struct shannon_mbr *mbr)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_mbr *mbr)
multi_ioread32	init.c	/^static void multi_ioread32(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen)
multi_ioread32	tool.h	/^	void (*multi_ioread32)(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
multi_iowrite32	init.c	/^static void multi_iowrite32(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen)
multi_iowrite32	tool.h	/^	void (*multi_iowrite32)(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
multi_raw_readl	init.c	/^static void multi_raw_readl(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen)
multi_raw_readl	tool.h	/^	void (*multi_raw_readl)(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
multi_raw_writel	init.c	/^static void multi_raw_writel(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen)
multi_raw_writel	tool.h	/^	void (*multi_raw_writel)(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
name	both.h	/^	char name[32];$/;"	m	struct:usr_flash	access:public
name	nor.c	/^	char name[32];$/;"	m	struct:norflash	file:	access:public
name	tool.h	/^	char name[32];$/;"	m	struct:shannon_bbt	access:public
name	tool.h	/^	char name[32];$/;"	m	struct:shannon_dev	access:public
name	tool.h	/^	char name[32];$/;"	m	struct:shannon_luninfo	access:public
nand_id	shannon-mbr.h	/^	u64 nand_id;$/;"	m	struct:shannon_mbr	access:public
nand_manufacture	shannon-mbr.h	/^	u64 nand_manufacture;$/;"	m	struct:shannon_mbr	access:public
nand_page_shift	shannon-mbr.h	/^	u32 nand_page_shift;$/;"	m	struct:shannon_mbr	access:public
nblk	both.h	/^	int nblk;		\/\/ block number of flash$/;"	m	struct:usr_flash	access:public
nblk	both.h	/^	int nblk;$/;"	m	struct:direct_io	access:public
nblock	tool.h	/^	int nblock;$/;"	m	struct:shannon_bbt	access:public
nblock	tool.h	/^	int nblock;$/;"	m	struct:shannon_luninfo	access:public
nbyte	both.h	/^	__u8 nbyte;$/;"	m	struct:sh_readid	access:public
nbyte	both.h	/^        __u8 nbyte;$/;"	m	struct:sh_writereg	access:public
ncacheread	both.h	/^	int ncacheread;$/;"	m	struct:direct_io	access:public
nchannel	both.h	/^	int nchannel;		\/\/ cfg channel number$/;"	m	struct:usr_config	access:public
nchannel	tool.h	/^	int nchannel;$/;"	m	struct:shannon_bbt	access:public
nchannel	tool.h	/^	int nchannel;$/;"	m	struct:shannon_luninfo	access:public
ncw_m13_16b	parse.c	/^static int ncw_m13_16b[][2] = {$/;"	v	file:
ncw_m13_8b	parse.c	/^static int ncw_m13_8b[][2] = {$/;"	v	file:
ncw_m14_16b	parse.c	/^static int ncw_m14_16b[][2] = {$/;"	v	file:
ndata	api.c	/^	int ndata;$/;"	m	struct:wr_flash_regs	file:	access:public
ndata	both.h	/^	int ndata;		\/\/ page data and metadata nbyte$/;"	m	struct:usr_config	access:public
ndatalun	both.h	/^	__u8 ndatalun;$/;"	m	struct:sh_raidinit	access:public
ndatalun	tool.h	/^	int ndatalun;$/;"	m	struct:shannon_sb_luninfo	access:public
new_bbt	mpt.c	/^static struct shannon_bbt *new_bbt = NULL;$/;"	v	typeref:struct:shannon_bbt	file:
newlunmap	tool.h	/^	int newlunmap;$/;"	m	struct:shannon_dev	access:public
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
nlun	both.h	/^	int nlun;		\/\/ cfg lun number per thread$/;"	m	struct:usr_config	access:public
nlun	tool.h	/^	int nlun;$/;"	m	struct:shannon_bbt	access:public
nlun	tool.h	/^	int nlun;$/;"	m	struct:shannon_luninfo	access:public
nmeta	both.h	/^	int nmeta;$/;"	m	struct:usr_config	access:public
no_dma	tool.h	/^	int no_dma;             \/* mean the request will not generate DMA at all *\/$/;"	m	struct:shannon_request	access:public
nor_buf_addr	nor.c	/^static int nor_buf_addr = 0;$/;"	v	file:
nor_erase	nor.c	/^static int nor_erase(struct shannon_dev *dev, struct norflash *nor, int start, int length)$/;"	f	file:	signature:(struct shannon_dev *dev, struct norflash *nor, int start, int length)
nor_erase_type	nor.c	/^	nor_erase_type = 0,$/;"	e	enum:__anon6	file:
nor_read	nor.c	/^static int nor_read(struct shannon_dev *dev, struct norflash *nor, void *data, int start, int length, int quiet)$/;"	f	file:	signature:(struct shannon_dev *dev, struct norflash *nor, void *data, int start, int length, int quiet)
nor_read_type	nor.c	/^	nor_read_type,$/;"	e	enum:__anon6	file:
nor_write	nor.c	/^static int nor_write(struct shannon_dev *dev, struct norflash *nor, void *data, int start, int length)$/;"	f	file:	signature:(struct shannon_dev *dev, struct norflash *nor, void *data, int start, int length)
nor_write_type	nor.c	/^	nor_write_type,$/;"	e	enum:__anon6	file:
norblock	nor.c	/^	struct norblock {$/;"	s	struct:norflash	file:	access:public
norflash	nor.c	/^struct norflash {$/;"	s	file:
norflash::block	nor.c	/^	} block[0];$/;"	m	struct:norflash	typeref:struct:norflash::norblock	file:	access:public
norflash::block_type	nor.c	/^	int block_type;$/;"	m	struct:norflash	file:	access:public
norflash::dbuf_size	nor.c	/^	int dbuf_size;$/;"	m	struct:norflash	file:	access:public
norflash::name	nor.c	/^	char name[32];$/;"	m	struct:norflash	file:	access:public
norflash::norblock	nor.c	/^	struct norblock {$/;"	s	struct:norflash	file:	access:public
norflash::norblock::count	nor.c	/^		int count;$/;"	m	struct:norflash::norblock	file:	access:public
norflash::norblock::size	nor.c	/^		int size;$/;"	m	struct:norflash::norblock	file:	access:public
norflash::total_block	nor.c	/^	int total_block;$/;"	m	struct:norflash	file:	access:public
norflash::total_size	nor.c	/^	int total_size;$/;"	m	struct:norflash	file:	access:public
norflash_info	tool.h	/^struct norflash_info {$/;"	s
norflash_info::magic_number	tool.h	/^	u64 magic_number;$/;"	m	struct:norflash_info	access:public
norflash_info::model_id	tool.h	/^	char model_id[40];$/;"	m	struct:norflash_info	access:public
norflash_info::service_tag	tool.h	/^	char service_tag[32];$/;"	m	struct:norflash_info	access:public
norinfo	tool.h	/^	struct norflash_info norinfo;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::norflash_info	access:public
npage	both.h	/^	int npage;		\/\/ page number per block$/;"	m	struct:usr_flash	access:public
npage	both.h	/^	int npage;$/;"	m	struct:direct_io	access:public
npage	tool.h	/^	int npage;$/;"	m	struct:shannon_bbt	access:public
npage	tool.h	/^	int npage;$/;"	m	struct:shannon_luninfo	access:public
nplane	both.h	/^	int nplane;		\/\/ configed plane number, must <= flash->nplane$/;"	m	struct:usr_config	access:public
nplane	both.h	/^	int nplane;		\/\/ plane number$/;"	m	struct:usr_flash	access:public
nplane	both.h	/^	int nplane;$/;"	m	struct:direct_io	access:public
nplane	tool.h	/^	int nplane;$/;"	m	struct:shannon_bbt	access:public
nplane	tool.h	/^	int nplane;$/;"	m	struct:shannon_luninfo	access:public
nplane_used	both.h	/^	int nplane_used;	\/\/ maybe hw configed as two plane but we use single plane to manipulate flash$/;"	m	struct:usr_config	access:public
nrand	help.c	/^int nrand(void)$/;"	f	signature:(void)
nrand	tool.h	/^extern int nrand(void);$/;"	p	signature:(void)
nrand_data	help.c	/^static int *nrand_data;$/;"	v	file:
nrand_max	help.c	/^static int nrand_max, nrand_pos;$/;"	v	file:
nrand_pos	help.c	/^static int nrand_max, nrand_pos;$/;"	v	file:
nsector	both.h	/^	__u8 nsector;		\/* nsector -1 *\/$/;"	m	struct:sh_cacheread	access:public
nsector	both.h	/^	int nsector;$/;"	m	struct:direct_io	access:public
nsector	tool.h	/^	int nsector;$/;"	m	struct:shannon_request	access:public
nthread	both.h	/^	int nthread;		\/\/ cfg thread number per channel$/;"	m	struct:usr_config	access:public
nthread	tool.h	/^	int nthread;$/;"	m	struct:shannon_bbt	access:public
nthread	tool.h	/^	int nthread;$/;"	m	struct:shannon_luninfo	access:public
offsetof	list.h	52;"	d
oob_size	both.h	/^	int oob_size;$/;"	m	struct:usr_flash	access:public
oob_size	shannon-mbr.h	/^	u32 oob_size;$/;"	m	struct:shannon_mbr	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_bufwrite	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_cacheread	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_erase	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_preread	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_raidinit	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_raidwrite	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_readid	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_reset	access:public
opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_write	access:public
opcode	both.h	/^	int opcode;$/;"	m	struct:direct_io	access:public
opcode	both.h	/^        __u8 opcode;$/;"	m	struct:sh_writereg	access:public
opcode	tool.h	/^	int opcode;$/;"	m	struct:shannon_request	access:public
optimal_codeword_size	both.h	/^	int optimal_codeword_size;$/;"	m	struct:usr_config	access:public
optimal_ncodeword	both.h	/^	int optimal_ncodeword;$/;"	m	struct:usr_config	access:public
optimal_ncodeword	parse.c	/^static int optimal_ncodeword(struct shannon_dev *dev, int sector_size)$/;"	f	file:	signature:(struct shannon_dev *dev, int sector_size)
optimal_page_nsector	both.h	/^	int optimal_page_nsector;$/;"	m	struct:usr_config	access:public
org_codeword_size	ecc.c	/^static int org_ncodeword = 0, org_codeword_size = 0;$/;"	v	file:
org_ncodeword	ecc.c	/^static int org_ncodeword = 0, org_codeword_size = 0;$/;"	v	file:
others	both.h	/^		__u8 others[5];$/;"	m	struct:flash_id::__anon1	access:public
overprovision_rate	both.h	/^	int overprovision_rate;$/;"	m	struct:usr_config	access:public
pad_cmdqueue	req.c	/^static void pad_cmdqueue(struct shannon_dev *dev, struct shannon_request *req, void *cmddata, int ncmddata)$/;"	f	file:	signature:(struct shannon_dev *dev, struct shannon_request *req, void *cmddata, int ncmddata)
pad_inc_u16	tool.h	/^static inline void pad_inc_u16(void *buf, int count, __u16 init_value)$/;"	f	signature:(void *buf, int count, __u16 init_value)
pad_inc_u32	tool.h	/^static inline void pad_inc_u32(void *buf, int count, __u32 init_value)$/;"	f	signature:(void *buf, int count, __u32 init_value)
pad_inc_u8	tool.h	/^static inline void pad_inc_u8(void *buf, int count, __u8 init_value)$/;"	f	signature:(void *buf, int count, __u8 init_value)
pad_rand	tool.h	/^static inline void pad_rand(void *buf, int count)$/;"	f	signature:(void *buf, int count)
pad_same_u32	tool.h	/^static inline void pad_same_u32(void *buf, int count, __u32 value)$/;"	f	signature:(void *buf, int count, __u32 value)
padding	both.h	/^        __u8 padding;$/;"	m	struct:sh_writereg	access:public
padding_buffer	tool.h	/^	void *padding_buffer;$/;"	m	struct:shannon_dev	access:public
page	tool.h	/^	int page;$/;"	m	struct:shannon_request	access:public
page_nsector	both.h	/^	int page_nsector;$/;"	m	struct:usr_config	access:public
page_size	both.h	/^	int page_size;$/;"	m	struct:usr_flash	access:public
page_size_shift	both.h	/^	int page_size_shift;$/;"	m	struct:usr_flash	access:public
pages_in_eblock	shannon-mbr.h	/^	u32 pages_in_eblock;$/;"	m	struct:shannon_mbr	access:public
parity_lun	tool.h	/^	int parity_lun;$/;"	m	struct:shannon_sb_luninfo	access:public
parse_config	parse.c	/^int parse_config(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
parse_config	tool.h	/^extern int parse_config(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
parse_config_from_file	parse.c	/^static int parse_config_from_file(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
parse_flash	parse.c	/^int parse_flash(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
parse_flash	tool.h	/^extern int parse_flash(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
per_byte_disable	tool.h	/^	int per_byte_disable;$/;"	m	struct:shannon_dev	access:public
perror_exit	tool.h	429;"	d
pexit	api.c	1480;"	d	file:
phy2log_lun	tool.h	/^static inline int phy2log_lun(struct shannon_dev *dev, int phylun)$/;"	f	signature:(struct shannon_dev *dev, int phylun)
phylun	tool.h	/^		int phylun;$/;"	m	struct:shannon_dev::target_lun	access:public
phylun	tool.h	/^	int phylun;$/;"	m	struct:shannon_lun	access:public
phylun_bitmap	both.h	/^	unsigned long phylun_bitmap[8];$/;"	m	struct:direct_io	access:public
phythread_idx	tool.h	/^	int phythread_idx;$/;"	m	struct:shannon_thread	access:public
phythread_mem	tool.h	/^	struct thread_mem *phythread_mem;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::thread_mem	access:public
pkg_partRef_fiji_map	dev-type.c	/^const char *pkg_partRef_fiji_map[] = {$/;"	v
pkg_partRef_k7f_map	dev-type.c	/^const char *pkg_partRef_k7f_map[] = {$/;"	v
pkg_partRef_k7h_dual_map	dev-type.c	/^const char *pkg_partRef_k7h_dual_map[] = {$/;"	v
plane_mask	both.h	/^	int plane_mask;$/;"	m	struct:usr_flash	access:public
plane_order	shannon-mbr.h	/^	u32 plane_order;$/;"	m	struct:shannon_mbr	access:public
poll_bufcmdqueue	tool.h	/^static inline int poll_bufcmdqueue(struct shannon_dev *dev, int head)$/;"	f	signature:(struct shannon_dev *dev, int head)
poll_bufcmdqueue_nowait	tool.h	/^static inline int poll_bufcmdqueue_nowait(struct shannon_dev *dev, int head)$/;"	f	signature:(struct shannon_dev *dev, int head)
poll_cmdqueue	tool.h	/^static inline int poll_cmdqueue(struct shannon_dev *dev, int lun)$/;"	f	signature:(struct shannon_dev *dev, int lun)
poll_cmdqueue_nowait	tool.h	/^static inline int poll_cmdqueue_nowait(struct shannon_dev *dev, int lun)$/;"	f	signature:(struct shannon_dev *dev, int lun)
poll_failed_exit	tool.h	432;"	d
power_budget	shannon-mbr.h	/^	u8 power_budget;$/;"	m	struct:shannon_mbr	access:public
power_budget	tool.h	/^	int power_budget;$/;"	m	struct:shannon_dev	access:public
power_cycle_count	shannon-mbr.h	/^	u64 power_cycle_count;$/;"	m	struct:shannon_mbr	access:public
power_on_seconds	shannon-mbr.h	/^	u64 power_on_seconds;	\/* updated in each reformat progress *\/$/;"	m	struct:shannon_mbr	access:public
ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_bufwrite	access:public
ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_cacheread	access:public
ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_erase	access:public
ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_preread	access:public
ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_raidinit	access:public
ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_raidwrite	access:public
ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_write	access:public
ppa	tool.h	/^	int ppa;$/;"	m	struct:shannon_request	access:public
pr_array	tool.h	447;"	d
pr_tool_usage	main.c	/^static void pr_tool_usage(void)$/;"	f	file:	signature:(void)
pr_u16_array	tool.h	467;"	d
pr_u16_array_noprefix	tool.h	472;"	d
pr_u32_array	tool.h	468;"	d
pr_u32_array_noprefix	tool.h	473;"	d
pr_u64_array	tool.h	469;"	d
pr_u64_array_noprefix	tool.h	474;"	d
pr_u8_array	tool.h	466;"	d
pr_u8_array_noprefix	tool.h	471;"	d
prepare_skip_empty_block	ecc.c	/^static int prepare_skip_empty_block(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
present_absent_luns	super.c	/^void present_absent_luns(struct shannon_dev *dev, char *value, int type)$/;"	f	signature:(struct shannon_dev *dev, char *value, int type)
present_absent_luns	tool.h	/^extern void present_absent_luns(struct shannon_dev *dev, char *value, int type);$/;"	p	signature:(struct shannon_dev *dev, char *value, int type)
present_luns	tool.h	/^	int present_luns;$/;"	m	struct:shannon_dev	access:public
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
print	tool.h	428;"	d
print_burnin_ecc_histogram	tool.h	/^	int print_burnin_ecc_histogram;$/;"	m	struct:shannon_dev	access:public
print_config	parse.c	/^static void print_config(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
prioritize_write	tool.h	/^	int prioritize_write;$/;"	m	struct:shannon_dev	access:public
private_data	tool.h	/^	void *private_data;$/;"	m	struct:shannon_dev	access:public
private_data	tool.h	/^	void *private_data;$/;"	m	struct:shannon_request	access:public
private_data_1	tool.h	/^	void *private_data_1;$/;"	m	struct:shannon_request	access:public
private_int	tool.h	/^	int private_int;$/;"	m	struct:shannon_dev	access:public
private_int	tool.h	/^	int private_int;$/;"	m	struct:shannon_request	access:public
private_int_1	tool.h	/^	int private_int_1;$/;"	m	struct:shannon_request	access:public
pte	both.h	/^		__u64 pte;$/;"	m	struct:sh_write::sh_write_sector	access:public
pte	both.h	/^	__u64 pte;$/;"	m	struct:sh_bufwrite	access:public
pte	both.h	/^	__u64 pte[0];$/;"	m	struct:sh_cacheread	access:public
raid_mode	both.h	/^	int raid_mode;$/;"	m	struct:usr_config	access:public
raid_stripes	shannon-mbr.h	/^	u16 raid_stripes;$/;"	m	struct:shannon_mbr	access:public
rand_erase	lost/reqlist.c	/^	rand_erase,$/;"	e	enum:__anon5	file:
rand_nops	lost/reqlist.c	/^	rand_nops,$/;"	e	enum:__anon5	file:
rand_read	lost/reqlist.c	/^	rand_read,$/;"	e	enum:__anon5	file:
rand_write	lost/reqlist.c	/^	rand_write = 0,$/;"	e	enum:__anon5	file:
raw_free_request	req.c	/^static void raw_free_request(struct shannon_request *req)$/;"	f	file:	signature:(struct shannon_request *req)
raw_readl	init.c	/^static __u32 raw_readl(struct shannon_dev *dev, int dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, int dwoff)
raw_readl	tool.h	/^	__u32 (*raw_readl)(struct shannon_dev *dev, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
raw_writel	init.c	/^static void raw_writel(struct shannon_dev *dev, __u32 value, int dwoff)$/;"	f	file:	signature:(struct shannon_dev *dev, __u32 value, int dwoff)
raw_writel	tool.h	/^	void (*raw_writel)(struct shannon_dev *dev, __u32 value, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
re_init_device	init.c	/^int re_init_device(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
re_init_device	tool.h	/^extern int re_init_device(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
read_mem	init.c	/^static void read_mem(struct shannon_dev *dev, void *user_addr, void *kernel_addr, int size)$/;"	f	file:	signature:(struct shannon_dev *dev, void *user_addr, void *kernel_addr, int size)
read_mem	tool.h	/^	void (*read_mem)(struct shannon_dev *dev, void *user_addr, void *kernel_addr, int size);$/;"	m	struct:shannon_dev	access:public
record_live_context	mpt.c	/^static void record_live_context(struct live_context *context)$/;"	f	file:	signature:(struct live_context *context)
recordfp	tool.h	/^	FILE *recordfp;$/;"	m	struct:shannon_dev	access:public
reg	tool.h	/^	__u32 *reg;$/;"	m	struct:live_context	access:public
register_atexit	main.c	/^static void register_atexit(void)$/;"	f	file:	signature:(void)
req_count	tool.h	/^	int req_count;$/;"	m	struct:shannon_thread	access:public
req_listhead	tool.h	/^	struct list_head req_listhead;$/;"	m	struct:shannon_bufhead	typeref:struct:shannon_bufhead::list_head	access:public
req_listhead	tool.h	/^	struct list_head req_listhead;$/;"	m	struct:shannon_lun	typeref:struct:shannon_lun::list_head	access:public
req_listhead	tool.h	/^	struct list_head req_listhead;$/;"	m	struct:shannon_thread	typeref:struct:shannon_thread::list_head	access:public
reset	init.c	/^static void reset(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
reset	tool.h	/^	void (*reset)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
reset_cursor	graphics.h	19;"	d
restore_default_config	init.c	/^static void restore_default_config(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
row	both.h	/^		int row;	\/\/ factory invalid block mark`s row off in block$/;"	m	struct:usr_flash::__factory_ivb	access:public
rsv	both.h	/^	__u8 rsv;$/;"	m	struct:sh_raidinit	access:public
rsv	both.h	/^	__u8 rsv[3];$/;"	m	struct:sh_readid	access:public
rsv	both.h	/^	__u8 rsv[6];$/;"	m	struct:sh_reset	access:public
rsv	both.h	/^        __u8 rsv[3];$/;"	m	struct:sh_writereg	access:public
rsv	tool.h	/^	int rsv[2];$/;"	m	struct:shannon_bbt	access:public
rsv	tool.h	/^	int rsv[2];$/;"	m	struct:shannon_luninfo	access:public
rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_erase	access:public
rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_preread	access:public
rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_raidwrite	access:public
rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_write	access:public
rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_erase	access:public
rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_preread	access:public
rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_raidwrite	access:public
rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_write	access:public
run_list	tool.h	/^	struct list_head run_list;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
rw_entire_buffer	tool.h	/^	int rw_entire_buffer;	\/* mean data and metadata are in the entire buffer if set *\/$/;"	m	struct:shannon_request	access:public
sandisk_15_microcode_table	microcode.c	/^static u32 sandisk_15_microcode_table[] = {$/;"	v	file:
save_cursor	graphics.h	12;"	d
sb	tool.h	/^	struct shannon_super_block *sb;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_super_block	access:public
sb_bbt	tool.h	/^	unsigned long sb_bbt[0][MAX_LUN_NLONG];$/;"	m	struct:shannon_bbt	access:public
sb_bbt	tool.h	/^	unsigned long sb_bbt[MAX_LUN_NLONG];$/;"	m	struct:shannon_sb_luninfo	access:public
sb_luninfo	tool.h	/^	struct shannon_sb_luninfo sb_luninfo;$/;"	m	struct:shannon_super_block	typeref:struct:shannon_super_block::shannon_sb_luninfo	access:public
sb_luninfo	tool.h	/^	struct shannon_sb_luninfo sb_luninfo[0];$/;"	m	struct:shannon_luninfo	typeref:struct:shannon_luninfo::shannon_sb_luninfo	access:public
sc_size	dev-type.c	/^struct subcard_size sc_size;$/;"	v	typeref:struct:subcard_size
scan_loops	tool.h	/^	int scan_loops;$/;"	m	struct:shannon_dev	access:public
secondary_cmd	api.c	/^	__u8 secondary_cmd;$/;"	m	struct:wr_flash_regs	file:	access:public
sector	both.h	/^	} sector[0];$/;"	m	struct:sh_write	typeref:struct:sh_write::sh_write_sector	access:public
sector_ncodeword	both.h	/^	int sector_ncodeword;	\/\/ ecc codeword num per sector$/;"	m	struct:usr_config	access:public
sector_size	both.h	/^	int sector_size;	\/\/ 1 << sector_size_shit$/;"	m	struct:usr_config	access:public
sector_size	both.h	/^	int sector_size;$/;"	m	struct:direct_io	access:public
sector_size_shift	both.h	/^	int sector_size_shift;$/;"	m	struct:usr_config	access:public
service_tag	tool.h	/^	char service_tag[32];$/;"	m	struct:norflash_info	access:public
set_bit	list.h	/^static inline void set_bit(int nr, volatile unsigned long *addr)$/;"	f	signature:(int nr, volatile unsigned long *addr)
set_cursor	graphics.h	18;"	d
set_max_ecc	mpt.c	/^static void set_max_ecc(struct shannon_dev *dev, int max_ecc) {$/;"	f	file:	signature:(struct shannon_dev *dev, int max_ecc)
sh_bufread_cmd	both.h	/^	sh_bufread_cmd		= 0x32,$/;"	e	enum:shannon_cmd
sh_bufwrite	both.h	/^struct sh_bufwrite {$/;"	s
sh_bufwrite::bsector	both.h	/^	__u8 bsector;$/;"	m	struct:sh_bufwrite	access:public
sh_bufwrite::head	both.h	/^	__u8 head;$/;"	m	struct:sh_bufwrite	access:public
sh_bufwrite::lun	both.h	/^	__u8 lun;$/;"	m	struct:sh_bufwrite	access:public
sh_bufwrite::metadata	both.h	/^	__u64 metadata;$/;"	m	struct:sh_bufwrite	access:public
sh_bufwrite::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_bufwrite	access:public
sh_bufwrite::ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_bufwrite	access:public
sh_bufwrite::pte	both.h	/^	__u64 pte;$/;"	m	struct:sh_bufwrite	access:public
sh_bufwrite_cmd	both.h	/^	sh_bufwrite_cmd		= 0x30,$/;"	e	enum:shannon_cmd
sh_cacheread	both.h	/^struct sh_cacheread {$/;"	s
sh_cacheread::bsector	both.h	/^	__u8 bsector;		\/* begin sector *\/$/;"	m	struct:sh_cacheread	access:public
sh_cacheread::head	both.h	/^	__u8 head;$/;"	m	struct:sh_cacheread	access:public
sh_cacheread::nsector	both.h	/^	__u8 nsector;		\/* nsector -1 *\/$/;"	m	struct:sh_cacheread	access:public
sh_cacheread::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_cacheread	access:public
sh_cacheread::ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_cacheread	access:public
sh_cacheread::pte	both.h	/^	__u64 pte[0];$/;"	m	struct:sh_cacheread	access:public
sh_cacheread_adv_cmd	both.h	/^	sh_cacheread_adv_cmd	= 0x08,$/;"	e	enum:shannon_cmd
sh_cacheread_cmd	both.h	/^	sh_cacheread_cmd	= 0x01,$/;"	e	enum:shannon_cmd
sh_erase	both.h	/^struct sh_erase {$/;"	s
sh_erase::head	both.h	/^	__u8 head;$/;"	m	struct:sh_erase	access:public
sh_erase::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_erase	access:public
sh_erase::ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_erase	access:public
sh_erase::rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_erase	access:public
sh_erase::rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_erase	access:public
sh_erase_cmd	both.h	/^	sh_erase_cmd		= 0x10,$/;"	e	enum:shannon_cmd
sh_last_cacheread_cmd	both.h	/^	sh_last_cacheread_cmd	= 0x02,$/;"	e	enum:shannon_cmd
sh_preread	both.h	/^struct sh_preread {$/;"	s
sh_preread::head	both.h	/^	__u8 head;$/;"	m	struct:sh_preread	access:public
sh_preread::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_preread	access:public
sh_preread::ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_preread	access:public
sh_preread::rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_preread	access:public
sh_preread::rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_preread	access:public
sh_preread_cmd	both.h	/^	sh_preread_cmd		= 0x00,$/;"	e	enum:shannon_cmd
sh_raidinit	both.h	/^struct sh_raidinit {$/;"	s
sh_raidinit::head	both.h	/^	__u8 head;$/;"	m	struct:sh_raidinit	access:public
sh_raidinit::ndatalun	both.h	/^	__u8 ndatalun;$/;"	m	struct:sh_raidinit	access:public
sh_raidinit::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_raidinit	access:public
sh_raidinit::ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_raidinit	access:public
sh_raidinit::rsv	both.h	/^	__u8 rsv;$/;"	m	struct:sh_raidinit	access:public
sh_raidinit_cmd	both.h	/^	sh_raidinit_cmd		= 0x90,$/;"	e	enum:shannon_cmd
sh_raidwrite	both.h	/^struct sh_raidwrite {$/;"	s
sh_raidwrite::head	both.h	/^	__u8 head;$/;"	m	struct:sh_raidwrite	access:public
sh_raidwrite::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_raidwrite	access:public
sh_raidwrite::ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_raidwrite	access:public
sh_raidwrite::rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_raidwrite	access:public
sh_raidwrite::rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_raidwrite	access:public
sh_raidwrite_cmd	both.h	/^	sh_raidwrite_cmd	= 0x80,$/;"	e	enum:shannon_cmd
sh_read_cmd	both.h	/^	sh_read_cmd		= 0xF8,	\/* not hardware cmd but soft cmd*\/$/;"	e	enum:shannon_cmd
sh_readid	both.h	/^struct sh_readid {$/;"	s
sh_readid::addr	both.h	/^	__u8 addr;$/;"	m	struct:sh_readid	access:public
sh_readid::cmd	both.h	/^	__u8 cmd;$/;"	m	struct:sh_readid	access:public
sh_readid::lun	both.h	/^	__u8 lun;$/;"	m	struct:sh_readid	access:public
sh_readid::nbyte	both.h	/^	__u8 nbyte;$/;"	m	struct:sh_readid	access:public
sh_readid::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_readid	access:public
sh_readid::rsv	both.h	/^	__u8 rsv[3];$/;"	m	struct:sh_readid	access:public
sh_readid_cmd	both.h	/^	sh_readid_cmd		= 0x40,$/;"	e	enum:shannon_cmd
sh_reset	both.h	/^struct sh_reset {$/;"	s
sh_reset::lun	both.h	/^	__u8 lun;$/;"	m	struct:sh_reset	access:public
sh_reset::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_reset	access:public
sh_reset::rsv	both.h	/^	__u8 rsv[6];$/;"	m	struct:sh_reset	access:public
sh_reset_cmd	both.h	/^	sh_reset_cmd		= 0xF0,$/;"	e	enum:shannon_cmd
sh_write	both.h	/^struct sh_write {$/;"	s
sh_write::head	both.h	/^	__u8 head;$/;"	m	struct:sh_write	access:public
sh_write::opcode	both.h	/^	__u8 opcode;$/;"	m	struct:sh_write	access:public
sh_write::ppa	both.h	/^	__u32 ppa;$/;"	m	struct:sh_write	access:public
sh_write::rsv_1	both.h	/^	__u8 rsv_1;$/;"	m	struct:sh_write	access:public
sh_write::rsv_2	both.h	/^	__u8 rsv_2;$/;"	m	struct:sh_write	access:public
sh_write::sector	both.h	/^	} sector[0];$/;"	m	struct:sh_write	typeref:struct:sh_write::sh_write_sector	access:public
sh_write::sh_write_sector	both.h	/^	struct sh_write_sector {$/;"	s	struct:sh_write	access:public
sh_write::sh_write_sector::metadata	both.h	/^		__u64 metadata;$/;"	m	struct:sh_write::sh_write_sector	access:public
sh_write::sh_write_sector::pte	both.h	/^		__u64 pte;$/;"	m	struct:sh_write::sh_write_sector	access:public
sh_write_cmd	both.h	/^	sh_write_cmd		= 0x20,$/;"	e	enum:shannon_cmd
sh_write_sector	both.h	/^	struct sh_write_sector {$/;"	s	struct:sh_write	access:public
sh_writereg	both.h	/^struct sh_writereg {$/;"	s
sh_writereg::addr	both.h	/^        __u8 addr;$/;"	m	struct:sh_writereg	access:public
sh_writereg::cmd	both.h	/^        __u8 cmd;$/;"	m	struct:sh_writereg	access:public
sh_writereg::data	both.h	/^        __u8 data[0];$/;"	m	struct:sh_writereg	access:public
sh_writereg::nbyte	both.h	/^        __u8 nbyte;$/;"	m	struct:sh_writereg	access:public
sh_writereg::opcode	both.h	/^        __u8 opcode;$/;"	m	struct:sh_writereg	access:public
sh_writereg::padding	both.h	/^        __u8 padding;$/;"	m	struct:sh_writereg	access:public
sh_writereg::rsv	both.h	/^        __u8 rsv[3];$/;"	m	struct:sh_writereg	access:public
sh_writereg_cmd	both.h	/^	sh_writereg_cmd		= 0x50,$/;"	e	enum:shannon_cmd
shadow	tool.h	/^		int shadow;$/;"	m	struct:shannon_dev::target_lun	access:public
shannon_bbt	tool.h	/^struct shannon_bbt {$/;"	s
shannon_bbt::name	tool.h	/^	char name[32];$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::nblock	tool.h	/^	int nblock;$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::nchannel	tool.h	/^	int nchannel;$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::nlun	tool.h	/^	int nlun;$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::npage	tool.h	/^	int npage;$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::nplane	tool.h	/^	int nplane;$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::nthread	tool.h	/^	int nthread;$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::rsv	tool.h	/^	int rsv[2];$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::sb_bbt	tool.h	/^	unsigned long sb_bbt[0][MAX_LUN_NLONG];$/;"	m	struct:shannon_bbt	access:public
shannon_bbt::size	tool.h	/^	int size;$/;"	m	struct:shannon_bbt	access:public
shannon_bbt_ops	bbt.c	/^int shannon_bbt_ops(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_bbt_ops	tool.h	/^extern int shannon_bbt_ops(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_bbt_ops_usage	bbt.c	/^void shannon_bbt_ops_usage(void)$/;"	f	signature:(void)
shannon_bufhead	tool.h	/^struct shannon_bufhead {$/;"	s
shannon_bufhead::cmdempty	tool.h	/^	int cmdempty;$/;"	m	struct:shannon_bufhead	access:public
shannon_bufhead::cmdhead	tool.h	/^	int cmdhead;$/;"	m	struct:shannon_bufhead	access:public
shannon_bufhead::cmdmem	tool.h	/^	struct thread_mem cmdmem;$/;"	m	struct:shannon_bufhead	typeref:struct:shannon_bufhead::thread_mem	access:public
shannon_bufhead::cmpmem	tool.h	/^	struct thread_mem cmpmem;$/;"	m	struct:shannon_bufhead	typeref:struct:shannon_bufhead::thread_mem	access:public
shannon_bufhead::req_listhead	tool.h	/^	struct list_head req_listhead;$/;"	m	struct:shannon_bufhead	typeref:struct:shannon_bufhead::list_head	access:public
shannon_bufwrite	bufwrite.c	/^int shannon_bufwrite(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_bufwrite	tool.h	/^extern int shannon_bufwrite(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_bufwrite_usage	bufwrite.c	/^static void shannon_bufwrite_usage(void)$/;"	f	file:	signature:(void)
shannon_cmd	both.h	/^enum shannon_cmd {$/;"	g
shannon_copy	api.c	/^int shannon_copy(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_copy	tool.h	/^extern int shannon_copy(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_copy_usage	api.c	/^static void shannon_copy_usage(void)$/;"	f	file:	signature:(void)
shannon_debug	main.c	/^static int shannon_debug(struct shannon_dev *dev, int argc, char **argv)$/;"	f	file:	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_dev	tool.h	/^struct shannon_dev {$/;"	s
shannon_dev::absent_lun_bitmap	tool.h	/^	unsigned long absent_lun_bitmap[32];$/;"	m	struct:shannon_dev	access:public
shannon_dev::absent_luns	tool.h	/^	int absent_luns;$/;"	m	struct:shannon_dev	access:public
shannon_dev::active_block	tool.h	/^	int active_block[8];$/;"	m	struct:shannon_dev	access:public
shannon_dev::advance_read	tool.h	/^	int advance_read;$/;"	m	struct:shannon_dev	access:public
shannon_dev::atomic_write	tool.h	/^	int atomic_write;$/;"	m	struct:shannon_dev	access:public
shannon_dev::bad_blocks	tool.h	/^	int bad_blocks;$/;"	m	struct:shannon_dev	access:public
shannon_dev::badblk_bmp	tool.h	/^	__u32 **badblk_bmp;		\/* bad blk bitmap per-lun *\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::bar_dwlen	tool.h	/^	int bar_dwlen[2];$/;"	m	struct:shannon_dev	access:public
shannon_dev::bb_count	tool.h	/^	unsigned int *bb_count;$/;"	m	struct:shannon_dev	access:public
shannon_dev::bm_bbt	tool.h	/^	int bm_bbt;$/;"	m	struct:shannon_dev	access:public
shannon_dev::board_temp_threshold	tool.h	/^	int board_temp_threshold;$/;"	m	struct:shannon_dev	access:public
shannon_dev::bufhead	tool.h	/^	struct shannon_bufhead *bufhead;\/* per-bufhead manage structure *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_bufhead	access:public
shannon_dev::cfgreg_dwoff	tool.h	/^	int cfgreg_dwoff;$/;"	m	struct:shannon_dev	access:public
shannon_dev::check_bad_luns	tool.h	/^	int check_bad_luns;$/;"	m	struct:shannon_dev	access:public
shannon_dev::clear_queue	tool.h	/^	void (*clear_queue)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
shannon_dev::config	tool.h	/^	struct usr_config *config;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_config	access:public
shannon_dev::config_bakup	tool.h	/^	struct usr_config *config_bakup;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_config	access:public
shannon_dev::config_hardware	tool.h	/^	void (*config_hardware)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
shannon_dev::ctrl_temp_threshold	tool.h	/^	int ctrl_temp_threshold;$/;"	m	struct:shannon_dev	access:public
shannon_dev::deliver_userdata	tool.h	/^	void (*deliver_userdata)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
shannon_dev::dev_type	tool.h	/^	int dev_type;$/;"	m	struct:shannon_dev	access:public
shannon_dev::disable_ecc	tool.h	/^	int disable_ecc;$/;"	m	struct:shannon_dev	access:public
shannon_dev::dma_max_read_limit	tool.h	/^	int dma_max_read_limit;$/;"	m	struct:shannon_dev	access:public
shannon_dev::do_direct_io	tool.h	/^	void (*do_direct_io)(struct shannon_dev *dev, struct direct_io *dio);$/;"	m	struct:shannon_dev	access:public
shannon_dev::domains	tool.h	/^	char domains[32];$/;"	m	struct:shannon_dev	access:public
shannon_dev::dummy_mem	tool.h	/^	struct memory dummy_mem;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::memory	access:public
shannon_dev::exitcode	tool.h	/^	int exitcode;$/;"	m	struct:shannon_dev	access:public
shannon_dev::exitlog	tool.h	/^	FILE *exitlog;$/;"	m	struct:shannon_dev	access:public
shannon_dev::fblocks	tool.h	/^	int fblocks;			\/* user input flash blocks number *\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::fd	tool.h	/^	int fd;$/;"	m	struct:shannon_dev	access:public
shannon_dev::flash	tool.h	/^	struct usr_flash *flash;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_flash	access:public
shannon_dev::flash_bakup	tool.h	/^	struct usr_flash *flash_bakup;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::usr_flash	access:public
shannon_dev::flash_ifclock	tool.h	/^	int flash_ifclock;$/;"	m	struct:shannon_dev	access:public
shannon_dev::flash_temp_threshold	tool.h	/^	int flash_temp_threshold;$/;"	m	struct:shannon_dev	access:public
shannon_dev::free_mem	tool.h	/^	void (*free_mem)(struct shannon_dev *dev, struct memory *mem);$/;"	m	struct:shannon_dev	access:public
shannon_dev::get_mem	tool.h	/^	void (*get_mem)(struct shannon_dev *dev, struct memory *mem);$/;"	m	struct:shannon_dev	access:public
shannon_dev::group_raid_luns	tool.h	/^	int group_raid_luns;$/;"	m	struct:shannon_dev	access:public
shannon_dev::group_raid_num	tool.h	/^	int group_raid_num;$/;"	m	struct:shannon_dev	access:public
shannon_dev::has_advance_read	tool.h	/^	int has_advance_read;$/;"	m	struct:shannon_dev	access:public
shannon_dev::hw_config	tool.h	/^	struct hw_config *hw_config;	\/* hardware config registers, must be synchronized with HW *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::hw_config	access:public
shannon_dev::hw_luns	tool.h	/^	int hw_luns;$/;"	m	struct:shannon_dev	access:public
shannon_dev::hw_nchannel	tool.h	/^	int hw_nchannel;$/;"	m	struct:shannon_dev	access:public
shannon_dev::hw_nlun	tool.h	/^	int hw_nlun;$/;"	m	struct:shannon_dev	access:public
shannon_dev::hw_nthread	tool.h	/^	int hw_nthread;$/;"	m	struct:shannon_dev	access:public
shannon_dev::hw_sysinfo	tool.h	/^	struct hw_sysinfo *hw_sysinfo;	\/* hareware system registers, must be synchronized with HW *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::hw_sysinfo	access:public
shannon_dev::hw_threads	tool.h	/^	int hw_threads;$/;"	m	struct:shannon_dev	access:public
shannon_dev::ifmode	tool.h	/^	int ifmode;			\/* present both HW and flash interface mode *\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::inherent_mbr	tool.h	/^	struct shannon_mbr *inherent_mbr;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_mbr	access:public
shannon_dev::inherent_mbr_sector_size	tool.h	/^	int inherent_mbr_sector_size;$/;"	m	struct:shannon_dev	access:public
shannon_dev::init_done	tool.h	/^	int init_done;$/;"	m	struct:shannon_dev	access:public
shannon_dev::init_mode	tool.h	/^	int init_mode;			\/* 0, normal init; 1, use present hw config *\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::interrupt_delay	tool.h	/^	int interrupt_delay;$/;"	m	struct:shannon_dev	access:public
shannon_dev::invalid_blocks	tool.h	/^	int invalid_blocks;$/;"	m	struct:shannon_dev	access:public
shannon_dev::ioread32	tool.h	/^	__u32 (*ioread32)(struct shannon_dev *dev, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::ioread_buflunreg	tool.h	/^	__u32 (*ioread_buflunreg)(struct shannon_dev *dev, int head, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::ioread_config	tool.h	/^	void (*ioread_config)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
shannon_dev::ioread_lunreg	tool.h	/^	__u32 (*ioread_lunreg)(struct shannon_dev *dev, int lun, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::iowidth	tool.h	/^	int iowidth;			\/* 1, 8bit; 2, 16bit *\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::iowrite32	tool.h	/^	void (*iowrite32)(struct shannon_dev *dev, __u32 value, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::iowrite_buflunreg	tool.h	/^	void (*iowrite_buflunreg)(struct shannon_dev *dev, __u32 value, int head, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::iowrite_config	tool.h	/^	void (*iowrite_config)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
shannon_dev::iowrite_lunreg	tool.h	/^	void (*iowrite_lunreg)(struct shannon_dev *dev, __u32 value, int lun, enum HW_lunreg lunreg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::loops	tool.h	/^	int loops;$/;"	m	struct:shannon_dev	access:public
shannon_dev::lun	tool.h	/^	struct shannon_lun *lun;	\/* per-lun manage structure *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_lun	access:public
shannon_dev::lun_bitmap	tool.h	/^	unsigned long lun_bitmap[32];	\/* invalid lun bitmap: 0 valid; 1 invalid*\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::lun_bitmap_backup	tool.h	/^	unsigned long lun_bitmap_backup[32];$/;"	m	struct:shannon_dev	access:public
shannon_dev::lunreg_dwoff	tool.h	/^	int lunreg_dwoff;$/;"	m	struct:shannon_dev	access:public
shannon_dev::lunreg_dwsize	tool.h	/^	int lunreg_dwsize;$/;"	m	struct:shannon_dev	access:public
shannon_dev::manual_nplane	tool.h	/^	int manual_nplane;$/;"	m	struct:shannon_dev	access:public
shannon_dev::max_board_temp	tool.h	/^	float max_board_temp;$/;"	m	struct:shannon_dev	access:public
shannon_dev::max_controller_temp	tool.h	/^	float max_controller_temp;$/;"	m	struct:shannon_dev	access:public
shannon_dev::max_flash_temp	tool.h	/^	float max_flash_temp;$/;"	m	struct:shannon_dev	access:public
shannon_dev::max_outstanding_bios	tool.h	/^	int max_outstanding_bios;$/;"	m	struct:shannon_dev	access:public
shannon_dev::maxplanes	tool.h	/^	int maxplanes;			\/* maxplanes supported for the flash attached *\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::mbr	tool.h	/^	struct shannon_mbr *mbr;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_mbr	access:public
shannon_dev::mbr_by_4k	tool.h	/^	int mbr_by_4k;$/;"	m	struct:shannon_dev	access:public
shannon_dev::mbr_version	tool.h	/^	u64 mbr_version;$/;"	m	struct:shannon_dev	access:public
shannon_dev::mem_glisthead	tool.h	/^	struct list_head mem_glisthead;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::list_head	access:public
shannon_dev::mmode	tool.h	/^	int mmode;$/;"	m	struct:shannon_dev	access:public
shannon_dev::mpt_begintime	tool.h	/^	time_t mpt_begintime;$/;"	m	struct:shannon_dev	access:public
shannon_dev::mpt_set_capacity	tool.h	/^	unsigned long mpt_set_capacity;$/;"	m	struct:shannon_dev	access:public
shannon_dev::mpt_timetook	tool.h	/^	char mpt_timetook[256];$/;"	m	struct:shannon_dev	access:public
shannon_dev::multi_ioread32	tool.h	/^	void (*multi_ioread32)(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
shannon_dev::multi_iowrite32	tool.h	/^	void (*multi_iowrite32)(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
shannon_dev::multi_raw_readl	tool.h	/^	void (*multi_raw_readl)(struct shannon_dev *dev, __u32 *des, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
shannon_dev::multi_raw_writel	tool.h	/^	void (*multi_raw_writel)(struct shannon_dev *dev, __u32 *src, int dwoff, int dwlen);$/;"	m	struct:shannon_dev	access:public
shannon_dev::name	tool.h	/^	char name[32];$/;"	m	struct:shannon_dev	access:public
shannon_dev::newlunmap	tool.h	/^	int newlunmap;$/;"	m	struct:shannon_dev	access:public
shannon_dev::norinfo	tool.h	/^	struct norflash_info norinfo;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::norflash_info	access:public
shannon_dev::padding_buffer	tool.h	/^	void *padding_buffer;$/;"	m	struct:shannon_dev	access:public
shannon_dev::per_byte_disable	tool.h	/^	int per_byte_disable;$/;"	m	struct:shannon_dev	access:public
shannon_dev::phythread_mem	tool.h	/^	struct thread_mem *phythread_mem;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::thread_mem	access:public
shannon_dev::power_budget	tool.h	/^	int power_budget;$/;"	m	struct:shannon_dev	access:public
shannon_dev::present_luns	tool.h	/^	int present_luns;$/;"	m	struct:shannon_dev	access:public
shannon_dev::print_burnin_ecc_histogram	tool.h	/^	int print_burnin_ecc_histogram;$/;"	m	struct:shannon_dev	access:public
shannon_dev::prioritize_write	tool.h	/^	int prioritize_write;$/;"	m	struct:shannon_dev	access:public
shannon_dev::private_data	tool.h	/^	void *private_data;$/;"	m	struct:shannon_dev	access:public
shannon_dev::private_int	tool.h	/^	int private_int;$/;"	m	struct:shannon_dev	access:public
shannon_dev::raw_readl	tool.h	/^	__u32 (*raw_readl)(struct shannon_dev *dev, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::raw_writel	tool.h	/^	void (*raw_writel)(struct shannon_dev *dev, __u32 value, int reg_dw_off);$/;"	m	struct:shannon_dev	access:public
shannon_dev::read_mem	tool.h	/^	void (*read_mem)(struct shannon_dev *dev, void *user_addr, void *kernel_addr, int size);$/;"	m	struct:shannon_dev	access:public
shannon_dev::recordfp	tool.h	/^	FILE *recordfp;$/;"	m	struct:shannon_dev	access:public
shannon_dev::reset	tool.h	/^	void (*reset)(struct shannon_dev *dev);$/;"	m	struct:shannon_dev	access:public
shannon_dev::sb	tool.h	/^	struct shannon_super_block *sb;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_super_block	access:public
shannon_dev::scan_loops	tool.h	/^	int scan_loops;$/;"	m	struct:shannon_dev	access:public
shannon_dev::silent_config	tool.h	/^	int silent_config;$/;"	m	struct:shannon_dev	access:public
shannon_dev::sorting_ecc_limit	tool.h	/^	int sorting_ecc_limit;$/;"	m	struct:shannon_dev	access:public
shannon_dev::sorting_print_string	tool.h	/^	char sorting_print_string[256];$/;"	m	struct:shannon_dev	access:public
shannon_dev::submit_request	tool.h	/^	int (*submit_request)(struct shannon_request *req);$/;"	m	struct:shannon_dev	access:public
shannon_dev::subsystemid	tool.h	/^	char subsystemid[8];$/;"	m	struct:shannon_dev	access:public
shannon_dev::sysreg_dwoff	tool.h	/^	int sysreg_dwoff;$/;"	m	struct:shannon_dev	access:public
shannon_dev::target_lun	tool.h	/^	struct target_lun {$/;"	s	struct:shannon_dev	access:public
shannon_dev::target_lun::blk_hole_begin	tool.h	/^		int blk_hole_begin;$/;"	m	struct:shannon_dev::target_lun	access:public
shannon_dev::target_lun::blk_hole_count	tool.h	/^		int blk_hole_count;$/;"	m	struct:shannon_dev::target_lun	access:public
shannon_dev::target_lun::id	tool.h	/^		union flash_id id;$/;"	m	struct:shannon_dev::target_lun	typeref:union:shannon_dev::target_lun::flash_id	access:public
shannon_dev::target_lun::loglun	tool.h	/^		int loglun;$/;"	m	struct:shannon_dev::target_lun	access:public
shannon_dev::target_lun::phylun	tool.h	/^		int phylun;$/;"	m	struct:shannon_dev::target_lun	access:public
shannon_dev::target_lun::shadow	tool.h	/^		int shadow;$/;"	m	struct:shannon_dev::target_lun	access:public
shannon_dev::target_lun::use	tool.h	/^		int use;$/;"	m	struct:shannon_dev::target_lun	access:public
shannon_dev::targetlun	tool.h	/^	}*targetlun;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::target_lun	access:public
shannon_dev::targetluns_support	tool.h	/^	int targetluns_support;$/;"	m	struct:shannon_dev	access:public
shannon_dev::thread	tool.h	/^	struct shannon_thread *thread;	\/* per-thread manage structure *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_thread	access:public
shannon_dev::timeout_silent	tool.h	/^	int timeout_silent;		\/* 1 don`t print cmdqueue timeout information *\/$/;"	m	struct:shannon_dev	access:public
shannon_dev::tmode	tool.h	/^	int tmode;$/;"	m	struct:shannon_dev	access:public
shannon_dev::unsafe_cfgable	tool.h	/^	int unsafe_cfgable;$/;"	m	struct:shannon_dev	access:public
shannon_dev::unsafe_mbrblock	tool.h	/^	int unsafe_mbrblock[4][512];$/;"	m	struct:shannon_dev	access:public
shannon_dev::valid_8bit	tool.h	/^	int valid_8bit;$/;"	m	struct:shannon_dev	access:public
shannon_dev::valid_luns	tool.h	/^	int valid_luns;$/;"	m	struct:shannon_dev	access:public
shannon_dev::write_mem	tool.h	/^	void (*write_mem)(struct shannon_dev *dev, void *kernel_addr, void *user_addr, int size);$/;"	m	struct:shannon_dev	access:public
shannon_dio	dio.c	/^int shannon_dio(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_dio	tool.h	/^extern int shannon_dio(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_dio_usage	dio.c	/^static void shannon_dio_usage(void)$/;"	f	file:	signature:(void)
shannon_erase	api.c	/^int shannon_erase(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_erase	tool.h	/^extern int shannon_erase(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_erase_usage	api.c	/^static void shannon_erase_usage(void)$/;"	f	file:	signature:(void)
shannon_fake_ecc	ecc.c	/^int shannon_fake_ecc(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_fake_ecc	tool.h	/^extern int shannon_fake_ecc(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_fake_ecc_usage	ecc.c	/^static void shannon_fake_ecc_usage(void)$/;"	f	file:	signature:(void)
shannon_hwinfo	tool.h	/^extern int shannon_hwinfo(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_hwinfo	utils.c	/^int shannon_hwinfo(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_ifmode	ifmode.c	/^int shannon_ifmode(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_ifmode	tool.h	/^extern int shannon_ifmode(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_ifmode_usage	ifmode.c	/^static void shannon_ifmode_usage(void)$/;"	f	file:	signature:(void)
shannon_info	tool.h	/^extern int shannon_info(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_info	utils.c	/^int shannon_info(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_ioctl	both.h	/^struct shannon_ioctl {$/;"	s
shannon_ioctl::__anon2::bar	both.h	/^		int bar;$/;"	m	union:shannon_ioctl::__anon2	access:public
shannon_ioctl::__anon2::size	both.h	/^		int size;$/;"	m	union:shannon_ioctl::__anon2	access:public
shannon_ioctl::__anon2::type	both.h	/^		int type;$/;"	m	union:shannon_ioctl::__anon2	access:public
shannon_ioctl::dma_addr	both.h	/^	dma_addr_t dma_addr;$/;"	m	struct:shannon_ioctl	access:public
shannon_ioctl::kernel_addr	both.h	/^	void *kernel_addr;$/;"	m	struct:shannon_ioctl	access:public
shannon_ioctl::user_addr	both.h	/^	void *user_addr;$/;"	m	struct:shannon_ioctl	access:public
shannon_lun	tool.h	/^struct shannon_lun {$/;"	s
shannon_lun::channel	tool.h	/^	int channel;$/;"	m	struct:shannon_lun	access:public
shannon_lun::head	tool.h	/^	int head;		\/* first cmd head of this lun *\/$/;"	m	struct:shannon_lun	access:public
shannon_lun::loglun	tool.h	/^	int loglun;$/;"	m	struct:shannon_lun	access:public
shannon_lun::phylun	tool.h	/^	int phylun;$/;"	m	struct:shannon_lun	access:public
shannon_lun::req_listhead	tool.h	/^	struct list_head req_listhead;$/;"	m	struct:shannon_lun	typeref:struct:shannon_lun::list_head	access:public
shannon_lun::tail	tool.h	/^	int tail;		\/* last cmd tail of this lun *\/$/;"	m	struct:shannon_lun	access:public
shannon_lun::thread	tool.h	/^	struct shannon_thread *thread;$/;"	m	struct:shannon_lun	typeref:struct:shannon_lun::shannon_thread	access:public
shannon_luninfo	tool.h	/^struct shannon_luninfo {	\/* file total super block *\/$/;"	s
shannon_luninfo::name	tool.h	/^	char name[32];$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::nblock	tool.h	/^	int nblock;$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::nchannel	tool.h	/^	int nchannel;$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::nlun	tool.h	/^	int nlun;$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::npage	tool.h	/^	int npage;$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::nplane	tool.h	/^	int nplane;$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::nthread	tool.h	/^	int nthread;$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::rsv	tool.h	/^	int rsv[2];$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo::sb_luninfo	tool.h	/^	struct shannon_sb_luninfo sb_luninfo[0];$/;"	m	struct:shannon_luninfo	typeref:struct:shannon_luninfo::shannon_sb_luninfo	access:public
shannon_luninfo::size	tool.h	/^	int size;$/;"	m	struct:shannon_luninfo	access:public
shannon_luninfo_ops	bbt.c	/^int shannon_luninfo_ops(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_luninfo_ops	tool.h	/^extern int shannon_luninfo_ops(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_luninfo_ops_usage	bbt.c	/^static void shannon_luninfo_ops_usage(void)$/;"	f	file:	signature:(void)
shannon_mbr	shannon-mbr.h	/^struct shannon_mbr {$/;"	s
shannon_mbr::bad_phy_lun_map	shannon-mbr.h	/^	u64 bad_phy_lun_map[8];$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::capacity	shannon-mbr.h	/^	u64 capacity;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::cfg_nchannel	shannon-mbr.h	/^	u32 cfg_nchannel;	\/\/ cfg_channels$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::cfg_nlun	shannon-mbr.h	/^	u32 cfg_nlun;		\/\/ cfg_lun_in_lunset$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::cfg_nthread	shannon-mbr.h	/^	u32 cfg_nthread;	\/\/ lunset_in_channel$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::clk	shannon-mbr.h	/^	u16 clk;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::dma_max_read_limit	shannon-mbr.h	/^	u8 dma_max_read_limit;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::eblocks_in_lun	shannon-mbr.h	/^	u32 eblocks_in_lun;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::ecc_codewords_in_logicb	shannon-mbr.h	/^	u8 ecc_codewords_in_logicb;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::ecc_correction_power	shannon-mbr.h	/^	u8 ecc_correction_power;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::feature_flags	shannon-mbr.h	/^	u64 feature_flags;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::flash_drvmode	shannon-mbr.h	/^	u32 flash_drvmode;	\/* output_drive_strength + 1; so 0 is invalid. *\/$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::hardware_version	shannon-mbr.h	/^	u64 hardware_version;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::history_erase_count	shannon-mbr.h	/^	u32 history_erase_count;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::host_read_sectors	shannon-mbr.h	/^	u64 host_read_sectors;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::host_write_sectors	shannon-mbr.h	/^	u64 host_write_sectors;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::id	shannon-mbr.h	/^	char id[32];$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::init_cold_sblk	shannon-mbr.h	/^	u32 init_cold_sblk;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::init_hot_sblk	shannon-mbr.h	/^	u32 init_hot_sblk;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::interrupt_delay	shannon-mbr.h	/^	u16 interrupt_delay;	\/* default to 1 *\/$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::logicb_shift	shannon-mbr.h	/^	u32 logicb_shift;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::lun_amount	shannon-mbr.h	/^	u32 lun_amount;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::lun_map_mode	shannon-mbr.h	/^	u8 lun_map_mode;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::luns_per_ce_mask	shannon-mbr.h	/^	u8 luns_per_ce_mask;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::max_outstanding_bios	shannon-mbr.h	/^	u32 max_outstanding_bios;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::max_pages_in_eblock	shannon-mbr.h	/^	u32 max_pages_in_eblock;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::mbr_version	shannon-mbr.h	/^	u64 mbr_version;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::nand_id	shannon-mbr.h	/^	u64 nand_id;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::nand_manufacture	shannon-mbr.h	/^	u64 nand_manufacture;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::nand_page_shift	shannon-mbr.h	/^	u32 nand_page_shift;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::oob_size	shannon-mbr.h	/^	u32 oob_size;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::pages_in_eblock	shannon-mbr.h	/^	u32 pages_in_eblock;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::plane_order	shannon-mbr.h	/^	u32 plane_order;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::power_budget	shannon-mbr.h	/^	u8 power_budget;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::power_cycle_count	shannon-mbr.h	/^	u64 power_cycle_count;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::power_on_seconds	shannon-mbr.h	/^	u64 power_on_seconds;	\/* updated in each reformat progress *\/$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::raid_stripes	shannon-mbr.h	/^	u16 raid_stripes;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::software_version	shannon-mbr.h	/^	u64 software_version;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::total_write_sectors	shannon-mbr.h	/^	u64 total_write_sectors;$/;"	m	struct:shannon_mbr	access:public
shannon_mbr::user_logicb_shift	shannon-mbr.h	/^	u32 user_logicb_shift;$/;"	m	struct:shannon_mbr	access:public
shannon_mpt	mpt.c	/^int shannon_mpt(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_mpt	tool.h	/^extern int shannon_mpt(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_mpt_just_scan	mpt.c	/^static int shannon_mpt_just_scan(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
shannon_mpt_read_used_bbt	mpt.c	/^static int shannon_mpt_read_used_bbt(struct shannon_dev *dev, int print_only, int skip_dynamic)$/;"	f	file:	signature:(struct shannon_dev *dev, int print_only, int skip_dynamic)
shannon_mpt_readbbt	mpt.c	/^int shannon_mpt_readbbt(struct shannon_dev *dev, int check_only)$/;"	f	signature:(struct shannon_dev *dev, int check_only)
shannon_mpt_readbbt	tool.h	/^extern int shannon_mpt_readbbt(struct shannon_dev *dev, int check_only);$/;"	p	signature:(struct shannon_dev *dev, int check_only)
shannon_mpt_readmbr	mpt.c	/^static int shannon_mpt_readmbr(struct shannon_dev *dev, int getonly, int enable_print)$/;"	f	file:	signature:(struct shannon_dev *dev, int getonly, int enable_print)
shannon_mpt_usage	mpt.c	/^static void shannon_mpt_usage(void)$/;"	f	file:	signature:(void)
shannon_nor	nor.c	/^int shannon_nor(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_nor	tool.h	/^extern int shannon_nor(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_nor_init	nor.c	/^static struct norflash *shannon_nor_init(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
shannon_nor_usage	nor.c	/^static void shannon_nor_usage(void)$/;"	f	file:	signature:(void)
shannon_read	api.c	/^int shannon_read(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_read	tool.h	/^extern int shannon_read(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_read_nor	nor.c	/^int shannon_read_nor(struct shannon_dev *dev, void *buf, int start, int len)$/;"	f	signature:(struct shannon_dev *dev, void *buf, int start, int len)
shannon_read_nor	tool.h	/^extern int shannon_read_nor(struct shannon_dev *dev, void *buf, int start, int len);$/;"	p	signature:(struct shannon_dev *dev, void *buf, int start, int len)
shannon_read_usage	api.c	/^static void shannon_read_usage(void)$/;"	f	file:	signature:(void)
shannon_readid	api.c	/^int shannon_readid(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_readid	tool.h	/^extern int shannon_readid(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_request	tool.h	/^struct shannon_request {$/;"	s
shannon_request::__anon3::direct_cmdqueue	tool.h	/^		__u8 direct_cmdqueue[64];	\/* directly construct cmdqueue, for example used for write regs *\/$/;"	m	union:shannon_request::__anon3	access:public
shannon_request::__anon3::ecc	tool.h	/^		__u8 ecc[64];	\/* cacheread cmd needs *\/$/;"	m	union:shannon_request::__anon3	access:public
shannon_request::__anon3::id	tool.h	/^		__u8 id[8];	\/* readid cmd needs *\/$/;"	m	union:shannon_request::__anon3	access:public
shannon_request::__anon3::status	tool.h	/^		__u64 status;	\/* others cmd need status *\/$/;"	m	union:shannon_request::__anon3	access:public
shannon_request::__anon4::bufhead_list	tool.h	/^		struct list_head bufhead_list;$/;"	m	union:shannon_request::__anon4	typeref:struct:shannon_request::__anon4::list_head	access:public
shannon_request::__anon4::lun_list	tool.h	/^		struct list_head lun_list;	\/* link req mounted on this lun *\/$/;"	m	union:shannon_request::__anon4	typeref:struct:shannon_request::__anon4::list_head	access:public
shannon_request::advance_read	tool.h	/^	int advance_read;$/;"	m	struct:shannon_request	access:public
shannon_request::bfree	tool.h	/^	int bfree;		\/* decide whether free data\/metadata mem or not *\/$/;"	m	struct:shannon_request	access:public
shannon_request::block	tool.h	/^	int block;$/;"	m	struct:shannon_request	access:public
shannon_request::bsector	tool.h	/^	int bsector;$/;"	m	struct:shannon_request	access:public
shannon_request::bufcmd	tool.h	/^	int bufcmd;		\/* !=0 means buffer write\/read request *\/$/;"	m	struct:shannon_request	access:public
shannon_request::chunk_block	tool.h	/^	int chunk_block;$/;"	m	struct:shannon_request	access:public
shannon_request::chunk_list	tool.h	/^	struct list_head chunk_list;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
shannon_request::chunk_plane	tool.h	/^	int chunk_plane;$/;"	m	struct:shannon_request	access:public
shannon_request::cmdhead	tool.h	/^	int cmdhead;$/;"	m	struct:shannon_request	access:public
shannon_request::cmdlen	tool.h	/^	int cmdlen;$/;"	m	struct:shannon_request	access:public
shannon_request::data	tool.h	/^	__u8 *data;$/;"	m	struct:shannon_request	access:public
shannon_request::dev	tool.h	/^	struct shannon_dev *dev;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::shannon_dev	access:public
shannon_request::head	tool.h	/^	int head;$/;"	m	struct:shannon_request	access:public
shannon_request::last_cacheread	tool.h	/^	int last_cacheread;$/;"	m	struct:shannon_request	access:public
shannon_request::list	tool.h	/^	struct list_head list;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
shannon_request::lun	tool.h	/^	int lun;$/;"	m	struct:shannon_request	access:public
shannon_request::mem_listhead	tool.h	/^	struct list_head mem_listhead;	\/* head of memory recording kernel_addr and dma_addr *\/$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
shannon_request::metadata	tool.h	/^	__u64 *metadata;	\/* cacheread needs *\/$/;"	m	struct:shannon_request	access:public
shannon_request::no_dma	tool.h	/^	int no_dma;             \/* mean the request will not generate DMA at all *\/$/;"	m	struct:shannon_request	access:public
shannon_request::nsector	tool.h	/^	int nsector;$/;"	m	struct:shannon_request	access:public
shannon_request::opcode	tool.h	/^	int opcode;$/;"	m	struct:shannon_request	access:public
shannon_request::page	tool.h	/^	int page;$/;"	m	struct:shannon_request	access:public
shannon_request::ppa	tool.h	/^	int ppa;$/;"	m	struct:shannon_request	access:public
shannon_request::private_data	tool.h	/^	void *private_data;$/;"	m	struct:shannon_request	access:public
shannon_request::private_data_1	tool.h	/^	void *private_data_1;$/;"	m	struct:shannon_request	access:public
shannon_request::private_int	tool.h	/^	int private_int;$/;"	m	struct:shannon_request	access:public
shannon_request::private_int_1	tool.h	/^	int private_int_1;$/;"	m	struct:shannon_request	access:public
shannon_request::run_list	tool.h	/^	struct list_head run_list;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::list_head	access:public
shannon_request::rw_entire_buffer	tool.h	/^	int rw_entire_buffer;	\/* mean data and metadata are in the entire buffer if set *\/$/;"	m	struct:shannon_request	access:public
shannon_request::sibling_arreq	tool.h	/^	struct shannon_request *sibling_arreq;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::shannon_request	access:public
shannon_request::wr_flash_reg_nbyte	tool.h	/^	int wr_flash_reg_nbyte;$/;"	m	struct:shannon_request	access:public
shannon_reset	api.c	/^int shannon_reset(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_reset	tool.h	/^extern int shannon_reset(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_rmw_fake_ecc	ecc.c	/^int shannon_rmw_fake_ecc(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_rmw_fake_ecc	tool.h	/^extern int shannon_rmw_fake_ecc(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_rmw_fake_ecc_usage	ecc.c	/^static void shannon_rmw_fake_ecc_usage(void)$/;"	f	file:	signature:(void)
shannon_rwloop	api.c	/^int shannon_rwloop(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_rwloop	tool.h	/^extern int shannon_rwloop(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_rwloop_usage	api.c	/^static void shannon_rwloop_usage(void)$/;"	f	file:	signature:(void)
shannon_sb_luninfo	tool.h	/^struct shannon_sb_luninfo {	\/* for per-super-block *\/$/;"	s
shannon_sb_luninfo::luns	tool.h	/^	int luns;$/;"	m	struct:shannon_sb_luninfo	access:public
shannon_sb_luninfo::ndatalun	tool.h	/^	int ndatalun;$/;"	m	struct:shannon_sb_luninfo	access:public
shannon_sb_luninfo::parity_lun	tool.h	/^	int parity_lun;$/;"	m	struct:shannon_sb_luninfo	access:public
shannon_sb_luninfo::sb_bbt	tool.h	/^	unsigned long sb_bbt[MAX_LUN_NLONG];$/;"	m	struct:shannon_sb_luninfo	access:public
shannon_softbitread	api.c	/^int shannon_softbitread(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_softbitread	tool.h	/^extern int shannon_softbitread(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_softbitread_a19	api.c	/^int shannon_softbitread_a19(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_softbitread_a19	tool.h	/^extern int shannon_softbitread_a19(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_softbitread_a19_usage	api.c	/^static void shannon_softbitread_a19_usage(void)$/;"	f	file:	signature:(void)
shannon_softbitread_usage	api.c	/^static void shannon_softbitread_usage(void)$/;"	f	file:	signature:(void)
shannon_super_async	super.c	/^int shannon_super_async(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
shannon_super_async	tool.h	/^extern int shannon_super_async(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
shannon_super_block	tool.h	/^struct shannon_super_block {$/;"	s
shannon_super_block::idx	tool.h	/^	int idx;$/;"	m	struct:shannon_super_block	access:public
shannon_super_block::sb_luninfo	tool.h	/^	struct shannon_sb_luninfo sb_luninfo;$/;"	m	struct:shannon_super_block	typeref:struct:shannon_super_block::shannon_sb_luninfo	access:public
shannon_super_erase	lost/super.c	/^int shannon_super_erase(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_erase	lost/super2.c	/^int shannon_super_erase(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_erase	super.c	/^int shannon_super_erase(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_erase	tool.h	/^extern int shannon_super_erase(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_erase_usage	lost/super.c	/^static void shannon_super_erase_usage(void)$/;"	f	file:	signature:(void)
shannon_super_erase_usage	lost/super2.c	/^static void shannon_super_erase_usage(void)$/;"	f	file:	signature:(void)
shannon_super_erase_usage	super.c	/^static void shannon_super_erase_usage(void)$/;"	f	file:	signature:(void)
shannon_super_read	lost/super.c	/^int shannon_super_read(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_read	lost/super2.c	/^int shannon_super_read(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_read	super.c	/^int shannon_super_read(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_read	tool.h	/^extern int shannon_super_read(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_read_usage	lost/super.c	/^static void shannon_super_read_usage(void)$/;"	f	file:	signature:(void)
shannon_super_read_usage	lost/super2.c	/^static void shannon_super_read_usage(void)$/;"	f	file:	signature:(void)
shannon_super_read_usage	super.c	/^static void shannon_super_read_usage(void)$/;"	f	file:	signature:(void)
shannon_super_readid	super.c	/^int shannon_super_readid(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_readid	tool.h	/^extern int shannon_super_readid(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_readid_usage	super.c	/^static void shannon_super_readid_usage(void)$/;"	f	file:	signature:(void)
shannon_super_reset	super.c	/^int shannon_super_reset(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
shannon_super_reset	tool.h	/^extern int shannon_super_reset(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
shannon_super_sync	super.c	/^int shannon_super_sync(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
shannon_super_sync	tool.h	/^extern int shannon_super_sync(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
shannon_super_toggle	super.c	/^int shannon_super_toggle(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
shannon_super_toggle	tool.h	/^extern int shannon_super_toggle(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
shannon_super_write	lost/super.c	/^int shannon_super_write(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_write	lost/super2.c	/^int shannon_super_write(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_write	super.c	/^int shannon_super_write(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_write	tool.h	/^extern int shannon_super_write(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_super_write_usage	lost/super.c	/^static void shannon_super_write_usage(void)$/;"	f	file:	signature:(void)
shannon_super_write_usage	lost/super2.c	/^static void shannon_super_write_usage(void)$/;"	f	file:	signature:(void)
shannon_super_write_usage	super.c	/^static void shannon_super_write_usage(void)$/;"	f	file:	signature:(void)
shannon_thread	tool.h	/^struct shannon_thread {$/;"	s
shannon_thread::cmdempty	tool.h	/^	int cmdempty;$/;"	m	struct:shannon_thread	access:public
shannon_thread::cmdhead	tool.h	/^	int cmdhead;		\/* byte unit *\/$/;"	m	struct:shannon_thread	access:public
shannon_thread::cmdmem	tool.h	/^	struct thread_mem cmdmem;$/;"	m	struct:shannon_thread	typeref:struct:shannon_thread::thread_mem	access:public
shannon_thread::cmpmem	tool.h	/^	struct thread_mem cmpmem;$/;"	m	struct:shannon_thread	typeref:struct:shannon_thread::thread_mem	access:public
shannon_thread::phythread_idx	tool.h	/^	int phythread_idx;$/;"	m	struct:shannon_thread	access:public
shannon_thread::req_count	tool.h	/^	int req_count;$/;"	m	struct:shannon_thread	access:public
shannon_thread::req_listhead	tool.h	/^	struct list_head req_listhead;$/;"	m	struct:shannon_thread	typeref:struct:shannon_thread::list_head	access:public
shannon_utils	tool.h	/^extern int shannon_utils(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_utils	utils.c	/^int shannon_utils(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_utils_usage	utils.c	/^static void shannon_utils_usage(void)$/;"	f	file:	signature:(void)
shannon_write	api.c	/^int shannon_write(struct shannon_dev *dev, int argc, char **argv)$/;"	f	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_write	tool.h	/^extern int shannon_write(struct shannon_dev *dev, int argc, char **argv);$/;"	p	signature:(struct shannon_dev *dev, int argc, char **argv)
shannon_write_usage	api.c	/^static void shannon_write_usage(void)$/;"	f	file:	signature:(void)
shannon_xxx	lost/reqlist.c	/^int shannon_xxx(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
show_cursor	graphics.h	17;"	d
sibling_arreq	tool.h	/^	struct shannon_request *sibling_arreq;$/;"	m	struct:shannon_request	typeref:struct:shannon_request::shannon_request	access:public
sigint_handler	dio.c	/^static void sigint_handler(int signo)$/;"	f	file:	signature:(int signo)
silent_config	parse.c	/^static void silent_config(struct shannon_dev *dev)$/;"	f	file:	signature:(struct shannon_dev *dev)
silent_config	tool.h	/^	int silent_config;$/;"	m	struct:shannon_dev	access:public
size	both.h	/^		int size;$/;"	m	union:shannon_ioctl::__anon2	access:public
size	nor.c	/^		int size;$/;"	m	struct:norflash::norblock	file:	access:public
size	tool.h	/^	int size;$/;"	m	struct:memory	access:public
size	tool.h	/^	int size;$/;"	m	struct:shannon_bbt	access:public
size	tool.h	/^	int size;$/;"	m	struct:shannon_luninfo	access:public
software_version	both.h	/^	u32 software_version;$/;"	m	struct:usr_config	access:public
software_version	shannon-mbr.h	/^	u64 software_version;$/;"	m	struct:shannon_mbr	access:public
sorting_ecc_limit	tool.h	/^	int sorting_ecc_limit;$/;"	m	struct:shannon_dev	access:public
sorting_print_string	tool.h	/^	char sorting_print_string[256];$/;"	m	struct:shannon_dev	access:public
status	tool.h	/^		__u64 status;	\/* others cmd need status *\/$/;"	m	union:shannon_request::__anon3	access:public
subcard_cnt	dev-type.h	/^	int subcard_cnt;$/;"	m	struct:subcard_size	access:public
subcard_col	dev-type.h	/^	int subcard_col;$/;"	m	struct:subcard_size	access:public
subcard_row	dev-type.h	/^	int subcard_row;$/;"	m	struct:subcard_size	access:public
subcard_size	dev-type.h	/^struct subcard_size {$/;"	s
subcard_size::subcard_cnt	dev-type.h	/^	int subcard_cnt;$/;"	m	struct:subcard_size	access:public
subcard_size::subcard_col	dev-type.h	/^	int subcard_col;$/;"	m	struct:subcard_size	access:public
subcard_size::subcard_row	dev-type.h	/^	int subcard_row;$/;"	m	struct:subcard_size	access:public
submit_failed_exit	tool.h	431;"	d
submit_polling_loop	req.c	/^void submit_polling_loop(struct shannon_dev *dev, struct list_head *req_head)$/;"	f	signature:(struct shannon_dev *dev, struct list_head *req_head)
submit_polling_loop	tool.h	/^extern void submit_polling_loop(struct shannon_dev *dev, struct list_head *req_head);$/;"	p	signature:(struct shannon_dev *dev, struct list_head *req_head)
submit_request	req.c	/^int submit_request(struct shannon_request *req)$/;"	f	signature:(struct shannon_request *req)
submit_request	tool.h	/^	int (*submit_request)(struct shannon_request *req);$/;"	m	struct:shannon_dev	access:public
submit_request	tool.h	/^extern int submit_request(struct shannon_request *req);$/;"	p	signature:(struct shannon_request *req)
subsystemid	tool.h	/^	char subsystemid[8];$/;"	m	struct:shannon_dev	access:public
success_mask	both.h	/^	int success_mask;$/;"	m	struct:usr_flash	access:public
success_status	both.h	/^	int success_status;	\/\/ successful status after manipulate$/;"	m	struct:usr_flash	access:public
super_set_feature	super.c	/^int super_set_feature(struct shannon_dev *dev, u8 cmd, u8 addr, u8 *value, int nbyte)$/;"	f	signature:(struct shannon_dev *dev, u8 cmd, u8 addr, u8 *value, int nbyte)
super_set_feature	tool.h	/^extern int super_set_feature(struct shannon_dev *dev, u8 cmd, u8 addr, u8 *value, int nbyte);$/;"	p	signature:(struct shannon_dev *dev, u8 cmd, u8 addr, u8 *value, int nbyte)
superblock_ndatalun	tool.h	/^static inline int superblock_ndatalun(struct shannon_dev *dev, int superblk)$/;"	f	signature:(struct shannon_dev *dev, int superblk)
superblock_nlun	tool.h	/^static inline int superblock_nlun(struct shannon_dev *dev, int superblk)$/;"	f	signature:(struct shannon_dev *dev, int superblk)
superblock_paritylun	tool.h	/^static inline int superblock_paritylun(struct shannon_dev *dev, int superblk)$/;"	f	signature:(struct shannon_dev *dev, int superblk)
sysreg_dwoff	tool.h	/^	int sysreg_dwoff;$/;"	m	struct:shannon_dev	access:public
tail	tool.h	/^	int tail;		\/* last cmd tail of this lun *\/$/;"	m	struct:shannon_lun	access:public
target_lun	tool.h	/^	struct target_lun {$/;"	s	struct:shannon_dev	access:public
targetlun	tool.h	/^	}*targetlun;$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::target_lun	access:public
targetluns_support	tool.h	/^	int targetluns_support;$/;"	m	struct:shannon_dev	access:public
test_bit	list.h	/^static inline int test_bit(int nr, const volatile unsigned long *addr)$/;"	f	signature:(int nr, const volatile unsigned long *addr)
thisdev	main.c	/^struct shannon_dev *thisdev = NULL;$/;"	v	typeref:struct:shannon_dev
thread	tool.h	/^	struct shannon_thread *thread;	\/* per-thread manage structure *\/$/;"	m	struct:shannon_dev	typeref:struct:shannon_dev::shannon_thread	access:public
thread	tool.h	/^	struct shannon_thread *thread;$/;"	m	struct:shannon_lun	typeref:struct:shannon_lun::shannon_thread	access:public
thread_mem	both.h	/^struct thread_mem {$/;"	s
thread_mem::dma_addr	both.h	/^	dma_addr_t dma_addr;$/;"	m	struct:thread_mem	access:public
thread_mem::kernel_addr	both.h	/^	void *kernel_addr;$/;"	m	struct:thread_mem	access:public
threads	both.h	/^	int threads;		\/\/ nchannel * nthread$/;"	m	struct:usr_config	access:public
throttle_limit	both.h	/^	__u8 throttle_limit;$/;"	m	struct:hw_config	access:public
timeout_silent	tool.h	/^	int timeout_silent;		\/* 1 don`t print cmdqueue timeout information *\/$/;"	m	struct:shannon_dev	access:public
timespan	mpt.c	/^static void timespan(time_t b, time_t e, char *stt)$/;"	f	file:	signature:(time_t b, time_t e, char *stt)
tmode	tool.h	/^	int tmode;$/;"	m	struct:shannon_dev	access:public
toshiba_15_microcode_table	microcode.c	/^static u32 toshiba_15_microcode_table[] = {$/;"	v	file:
toshiba_19_microcode_table	microcode.c	/^static u32 toshiba_19_microcode_table[] = {$/;"	v	file:
toshiba_a19_128gb_microcode_table	microcode.c	/^static u32 toshiba_a19_128gb_microcode_table[] = {$/;"	v	file:
toshiba_a19_microcode_table	microcode.c	/^static u32 toshiba_a19_microcode_table[] = {$/;"	v	file:
total_block	nor.c	/^	int total_block;$/;"	m	struct:norflash	file:	access:public
total_size	nor.c	/^	int total_size;$/;"	m	struct:norflash	file:	access:public
total_write_sectors	shannon-mbr.h	/^	u64 total_write_sectors;$/;"	m	struct:shannon_mbr	access:public
tv	both.h	/^	struct timeval tv;	\/* deliver timeval to user space *\/$/;"	m	struct:direct_io	typeref:struct:direct_io::timeval	access:public
type	both.h	/^		int type;$/;"	m	union:shannon_ioctl::__anon2	access:public
type	both.h	/^	int type;		\/* DIRECT_IO_START, DIRECT_IO_POLL or DIRECT_IO_STOP *\/$/;"	m	struct:direct_io	access:public
u16	tool.h	/^typedef __u16 u16;$/;"	t
u32	tool.h	/^typedef __u32 u32;$/;"	t
u64	tool.h	/^typedef __u64 u64;$/;"	t
u8	tool.h	/^typedef __u8 u8;$/;"	t
ulong	tool.h	/^typedef unsigned long ulong;$/;"	t
uniq_rand	help.c	/^void uniq_rand(int num, int seed, int uniq_buffer[])$/;"	f	signature:(int num, int seed, int uniq_buffer[])
uniq_rand	tool.h	/^extern void uniq_rand(int num, int seed, int uniq_buffer[]);$/;"	p	signature:(int num, int seed, int uniq_buffer[])
unsafe_cfgable	tool.h	/^	int unsafe_cfgable;$/;"	m	struct:shannon_dev	access:public
unsafe_mbrblock	tool.h	/^	int unsafe_mbrblock[4][512];$/;"	m	struct:shannon_dev	access:public
update_bufcmdqueue	tool.h	/^static inline void update_bufcmdqueue(struct shannon_dev *dev, int head)$/;"	f	signature:(struct shannon_dev *dev, int head)
update_cmdqueue	tool.h	/^static inline void update_cmdqueue(struct shannon_dev *dev, int lun)$/;"	f	signature:(struct shannon_dev *dev, int lun)
update_poll_bufcmdqueue	tool.h	/^static inline int update_poll_bufcmdqueue(struct shannon_dev *dev, int head)$/;"	f	signature:(struct shannon_dev *dev, int head)
update_poll_cmdqueue	tool.h	/^static inline int update_poll_cmdqueue(struct shannon_dev *dev, int lun)$/;"	f	signature:(struct shannon_dev *dev, int lun)
usage	lost/format.sh	/^usage()$/;"	f
use	tool.h	/^		int use;$/;"	m	struct:shannon_dev::target_lun	access:public
used_bbt	mpt.c	/^static struct shannon_bbt *used_bbt = NULL;$/;"	v	typeref:struct:shannon_bbt	file:
user_addr	both.h	/^	void *user_addr;$/;"	m	struct:shannon_ioctl	access:public
user_logicb_shift	shannon-mbr.h	/^	u32 user_logicb_shift;$/;"	m	struct:shannon_mbr	access:public
user_mask	both.h	/^	__u8 user_mask;$/;"	m	struct:hw_config	access:public
user_sector_size_shift	both.h	/^	int user_sector_size_shift;$/;"	m	struct:usr_config	access:public
usr_config	both.h	/^struct usr_config {$/;"	s
usr_config::async_cycles	both.h	/^	int async_cycles;$/;"	m	struct:usr_config	access:public
usr_config::chunk_ndata	both.h	/^	int chunk_ndata;	\/\/ chunk data and metadata nbyte$/;"	m	struct:usr_config	access:public
usr_config::chunk_nmeta	both.h	/^	int chunk_nmeta;$/;"	m	struct:usr_config	access:public
usr_config::chunk_nsector	both.h	/^	int chunk_nsector;$/;"	m	struct:usr_config	access:public
usr_config::codeword_size	both.h	/^	int codeword_size;$/;"	m	struct:usr_config	access:public
usr_config::drvmode	both.h	/^	u32 drvmode;		\/\/ set falsh drive mode feature$/;"	m	struct:usr_config	access:public
usr_config::ecc_mode	both.h	/^	int ecc_mode;$/;"	m	struct:usr_config	access:public
usr_config::full_sector_size	both.h	/^	int full_sector_size;$/;"	m	struct:usr_config	access:public
usr_config::hardware_version	both.h	/^	u32 hardware_version;$/;"	m	struct:usr_config	access:public
usr_config::ifmode	both.h	/^	int ifmode;		\/\/ interface mode, 0:async ONFI; 1:toggle; 2:unused; 3:sync ONFI$/;"	m	struct:usr_config	access:public
usr_config::lun_mask	both.h	/^	int lun_mask;		\/\/ the value write to hw_config$/;"	m	struct:usr_config	access:public
usr_config::luns	both.h	/^	int luns;		\/\/ nchannel * nthread * nlun;$/;"	m	struct:usr_config	access:public
usr_config::nchannel	both.h	/^	int nchannel;		\/\/ cfg channel number$/;"	m	struct:usr_config	access:public
usr_config::ndata	both.h	/^	int ndata;		\/\/ page data and metadata nbyte$/;"	m	struct:usr_config	access:public
usr_config::nlun	both.h	/^	int nlun;		\/\/ cfg lun number per thread$/;"	m	struct:usr_config	access:public
usr_config::nmeta	both.h	/^	int nmeta;$/;"	m	struct:usr_config	access:public
usr_config::nplane	both.h	/^	int nplane;		\/\/ configed plane number, must <= flash->nplane$/;"	m	struct:usr_config	access:public
usr_config::nplane_used	both.h	/^	int nplane_used;	\/\/ maybe hw configed as two plane but we use single plane to manipulate flash$/;"	m	struct:usr_config	access:public
usr_config::nthread	both.h	/^	int nthread;		\/\/ cfg thread number per channel$/;"	m	struct:usr_config	access:public
usr_config::optimal_codeword_size	both.h	/^	int optimal_codeword_size;$/;"	m	struct:usr_config	access:public
usr_config::optimal_ncodeword	both.h	/^	int optimal_ncodeword;$/;"	m	struct:usr_config	access:public
usr_config::optimal_page_nsector	both.h	/^	int optimal_page_nsector;$/;"	m	struct:usr_config	access:public
usr_config::overprovision_rate	both.h	/^	int overprovision_rate;$/;"	m	struct:usr_config	access:public
usr_config::page_nsector	both.h	/^	int page_nsector;$/;"	m	struct:usr_config	access:public
usr_config::raid_mode	both.h	/^	int raid_mode;$/;"	m	struct:usr_config	access:public
usr_config::sector_ncodeword	both.h	/^	int sector_ncodeword;	\/\/ ecc codeword num per sector$/;"	m	struct:usr_config	access:public
usr_config::sector_size	both.h	/^	int sector_size;	\/\/ 1 << sector_size_shit$/;"	m	struct:usr_config	access:public
usr_config::sector_size_shift	both.h	/^	int sector_size_shift;$/;"	m	struct:usr_config	access:public
usr_config::software_version	both.h	/^	u32 software_version;$/;"	m	struct:usr_config	access:public
usr_config::threads	both.h	/^	int threads;		\/\/ nchannel * nthread$/;"	m	struct:usr_config	access:public
usr_config::user_sector_size_shift	both.h	/^	int user_sector_size_shift;$/;"	m	struct:usr_config	access:public
usr_config::vendor_id	both.h	/^	int vendor_id;$/;"	m	struct:usr_config	access:public
usr_flash	both.h	/^struct usr_flash {$/;"	s
usr_flash::__drvsetting	both.h	/^	struct __drvsetting {$/;"	s	struct:usr_flash	access:public
usr_flash::__drvsetting::data	both.h	/^		__u8 data[16];$/;"	m	struct:usr_flash::__drvsetting	access:public
usr_flash::__drvsetting::datanum	both.h	/^		__u8 datanum;$/;"	m	struct:usr_flash::__drvsetting	access:public
usr_flash::__factory_ivb	both.h	/^	struct __factory_ivb {$/;"	s	struct:usr_flash	access:public
usr_flash::__factory_ivb::hi_col	both.h	/^		int hi_col;$/;"	m	struct:usr_flash::__factory_ivb	access:public
usr_flash::__factory_ivb::lo_col	both.h	/^		int lo_col;	\/\/ factory invalid block mark`s low and high column off in page$/;"	m	struct:usr_flash::__factory_ivb	access:public
usr_flash::__factory_ivb::row	both.h	/^		int row;	\/\/ factory invalid block mark`s row off in block$/;"	m	struct:usr_flash::__factory_ivb	access:public
usr_flash::device_id	both.h	/^	int device_id;$/;"	m	struct:usr_flash	access:public
usr_flash::drvsetting	both.h	/^	} drvsetting;$/;"	m	struct:usr_flash	typeref:struct:usr_flash::__drvsetting	access:public
usr_flash::entire_page_size	both.h	/^	int entire_page_size;	\/\/ page_size + oob_size$/;"	m	struct:usr_flash	access:public
usr_flash::factory_ivb	both.h	/^	} factory_ivb[8];$/;"	m	struct:usr_flash	typeref:struct:usr_flash::__factory_ivb	access:public
usr_flash::feature_id	both.h	/^	int feature_id;$/;"	m	struct:usr_flash	access:public
usr_flash::id	both.h	/^	union flash_id id;$/;"	m	struct:usr_flash	typeref:union:usr_flash::flash_id	access:public
usr_flash::ifmode	both.h	/^	int ifmode;		\/\/ flash ifmode$/;"	m	struct:usr_flash	access:public
usr_flash::lun_mask	both.h	/^	int lun_mask;$/;"	m	struct:usr_flash	access:public
usr_flash::name	both.h	/^	char name[32];$/;"	m	struct:usr_flash	access:public
usr_flash::nblk	both.h	/^	int nblk;		\/\/ block number of flash$/;"	m	struct:usr_flash	access:public
usr_flash::npage	both.h	/^	int npage;		\/\/ page number per block$/;"	m	struct:usr_flash	access:public
usr_flash::nplane	both.h	/^	int nplane;		\/\/ plane number$/;"	m	struct:usr_flash	access:public
usr_flash::oob_size	both.h	/^	int oob_size;$/;"	m	struct:usr_flash	access:public
usr_flash::page_size	both.h	/^	int page_size;$/;"	m	struct:usr_flash	access:public
usr_flash::page_size_shift	both.h	/^	int page_size_shift;$/;"	m	struct:usr_flash	access:public
usr_flash::plane_mask	both.h	/^	int plane_mask;$/;"	m	struct:usr_flash	access:public
usr_flash::success_mask	both.h	/^	int success_mask;$/;"	m	struct:usr_flash	access:public
usr_flash::success_status	both.h	/^	int success_status;	\/\/ successful status after manipulate$/;"	m	struct:usr_flash	access:public
usr_flash::vendor_id	both.h	/^	int vendor_id;$/;"	m	struct:usr_flash	access:public
valid_8bit	tool.h	/^	int valid_8bit;$/;"	m	struct:shannon_dev	access:public
valid_luns	tool.h	/^	int valid_luns;$/;"	m	struct:shannon_dev	access:public
vendor_id	both.h	/^		__u8 vendor_id;$/;"	m	struct:flash_id::__anon1	access:public
vendor_id	both.h	/^	int vendor_id;$/;"	m	struct:usr_config	access:public
vendor_id	both.h	/^	int vendor_id;$/;"	m	struct:usr_flash	access:public
vendory_mode	api.c	/^	int vendory_mode;$/;"	m	struct:wr_flash_regs	file:	access:public
wr_flash_reg_nbyte	tool.h	/^	int wr_flash_reg_nbyte;$/;"	m	struct:shannon_request	access:public
wr_flash_regs	api.c	/^struct wr_flash_regs {$/;"	s	file:
wr_flash_regs::addr	api.c	/^	__u8 addr;$/;"	m	struct:wr_flash_regs	file:	access:public
wr_flash_regs::cmd	api.c	/^	__u8 cmd;$/;"	m	struct:wr_flash_regs	file:	access:public
wr_flash_regs::data	api.c	/^	__u8 data[16];$/;"	m	struct:wr_flash_regs	file:	access:public
wr_flash_regs::has_secondary_cmd	api.c	/^	int has_secondary_cmd;$/;"	m	struct:wr_flash_regs	file:	access:public
wr_flash_regs::ndata	api.c	/^	int ndata;$/;"	m	struct:wr_flash_regs	file:	access:public
wr_flash_regs::secondary_cmd	api.c	/^	__u8 secondary_cmd;$/;"	m	struct:wr_flash_regs	file:	access:public
wr_flash_regs::vendory_mode	api.c	/^	int vendory_mode;$/;"	m	struct:wr_flash_regs	file:	access:public
write_advanced_read_microcode	microcode.c	/^void write_advanced_read_microcode(struct shannon_dev *dev)$/;"	f	signature:(struct shannon_dev *dev)
write_advanced_read_microcode	tool.h	/^void write_advanced_read_microcode(struct shannon_dev *dev);$/;"	p	signature:(struct shannon_dev *dev)
write_flash_registers	api.c	/^static int write_flash_registers(struct shannon_dev *dev, int lun, struct wr_flash_regs *wd)$/;"	f	file:	signature:(struct shannon_dev *dev, int lun, struct wr_flash_regs *wd)
write_mem	init.c	/^static void write_mem(struct shannon_dev *dev, void *kernel_addr, void *user_addr, int size)$/;"	f	file:	signature:(struct shannon_dev *dev, void *kernel_addr, void *user_addr, int size)
write_mem	tool.h	/^	void (*write_mem)(struct shannon_dev *dev, void *kernel_addr, void *user_addr, int size);$/;"	m	struct:shannon_dev	access:public
zmalloc	tool.h	/^static inline void *zmalloc(int size)$/;"	f	signature:(int size)
